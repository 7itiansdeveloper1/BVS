@model ISas.Entities.FeesEntities.Fee_FinePolicyModels
@using ISas.Web.Models;
@{
    string encodedPath = Html.EncodedPathString(" ", "New", "Fee_FinePolicy", new { StructId = Model.StructId, StructName = Model.StructName }, htmlAttributes: new { });
}
<section class="content-header">
    <h1>
        Fine Setup <small>(UPDATE)</small>
    </h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li>Fee</li>
        <li><a href="@Url.Action("New", "Fee_FeeStructureMaster")">Structure List</a></li>
        <li><a href="@Html.EncodedPath(" ", "New", "Fee_FinePolicy", new {StructId = Model.StructId, StructName = Model.StructName }, htmlAttributes:new { })">Fine Setup</a></li>
        <li>Update</li>
    </ol>
</section>
<section class="content">
    @using (Html.BeginForm("Fee_FinePolicy_CRUD", "Fee_FinePolicy", FormMethod.Post, htmlAttributes: new { }))
    {
        @Html.HiddenFor(r => Model.StructId)
        @Html.HiddenFor(r => Model.PolicyId)
        <div class="box box-warning">
            <div class="box-header with-border">
                <h5 class="box-title">Structure Name : <span class="text-primary">@Html.DisplayFor(r => Model.StructName)</span></h5>
            </div>
            <div class="box-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.FixAmount)</label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.FixAmount, htmlAttributes: new { @class = "form-control", onkeypress = "return NumericOnly(event)" })
                                @Html.ValidationMessageFor(r => Model.FixAmount, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Amount)</label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.Amount, htmlAttributes: new { @class = "form-control", onkeypress = "return NumericOnly(event)" })
                                @Html.ValidationMessageFor(r => Model.Amount, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Frequency)</label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.Frequency, new SelectList(Model.FrequencyList, "Value", "Text"), "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.Frequency, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>

                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.TillDay)</label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.TillDay, new SelectList(Model.TillDayList, "Value", "Text"), "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.TillDay, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.TillMonth)</label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.TillMonth, new SelectList(Model.TillMonthList, "Value", "Text"), "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.TillMonth, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="box-footer">
                <button class="btn btn-warning" id="savebutton" type="button" onclick="DoAjaxPostAndMore(this)">UPDATE</button>
                <button class="btn btn-default" type="button" onclick="window.location.reload()">RESET</button>
            </div>
        </div>
    }

    @{ Html.RenderAction("LandingPage", "Fee_FinePolicy", new { StructId = Model.StructId, StructName = Model.StructName }); }
</section>
<script>
    function DoAjaxPostAndMore(btnClicked) {
        var $form = $(btnClicked).parents('form');
        $.ajax({
            type: "POST",
            beforeSend: function () {
                spinnerShow();
            },
            url: $form.attr('action'),
            data: $form.serialize(),
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (response) {
                if (response.status == 'success') {
                    OpenMessegeAutoHideDiv(response.Msg, response.Color);
                    setTimeout(function () { window.location = "@encodedPath"; }, 3000);
                }
                else {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnModelStateNotValid').val());
                    AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
                    AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
                }
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
</script>

