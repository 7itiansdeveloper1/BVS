@model ISas.Entities.HR_Payroll_Entities.HR_Payroll_LeaveMasterModels
@{
    List<SelectListItem> optList = new List<SelectListItem>();
    optList.Add(new SelectListItem { Text = "No", Value = "False" });
    optList.Add(new SelectListItem { Text = "Yes", Value = "True" });
}
<section class="content-header">
    <h1>
        Leave Setup <small>(UPDATE)</small>
    </h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li>HR & Payroll</li>
        <li><a href="@Url.Action("New", "HR_Payroll_LeaveMaster")"> Leave Setup</a></li>
        <li class="active">Update</li>
    </ol>
</section>
<section class="content">
    @using (Html.BeginForm("HR_Payroll_LeaveMaster_CRUD", "HR_Payroll_LeaveMaster", FormMethod.Post, htmlAttributes: new { }))
    {
        @Html.HiddenFor(r => Model.LvID)
        <div class="box box-warning">
            <div class="box-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.LvCode)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.LvCode, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(r => Model.LvCode, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.LeaveType)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.LeaveType, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(r => Model.LeaveType, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>

                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.AnnQuota)</label>
                            <div class="select">
                                <input type="number" name="AnnQuota" value="@Model.AnnQuota" id="AnnQuota" class="form-control" />
                                @Html.ValidationMessageFor(r => Model.AnnQuota, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-4">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.MaxAllow)</label>
                            <div class="select">
                                <input type="number" name="MaxAllow" value="@Model.MaxAllow" id="MaxAllow" class="form-control" />
                                @Html.ValidationMessageFor(r => Model.MaxAllow, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Paid)</label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.Paid, new SelectList(optList, "Value", "Text"), htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.Paid, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.CF)</label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.CF, new SelectList(optList, "Value", "Text"), htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.CF, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Balance)</label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.Balance, new SelectList(optList, "Value", "Text"), htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.Balance, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Running)</label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.Running, new SelectList(optList, "Value", "Text"), htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.Running, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>

                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Encash)</label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.Encash, new SelectList(optList, "Value", "Text"), htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.Encash, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="box-footer">
                <button class="btn btn-warning" id="savebutton" type="button" onclick="DoAjaxPostAndMore(this)">UPDATE</button>
                <button class="btn btn-default" type="button" onclick="window.location.reload()">RESET</button>
            </div>
        </div>
    }
    @{ Html.RenderAction("LandingPage", "HR_Payroll_LeaveMaster"); }
</section>
<script>
    function DoAjaxPostAndMore(btnClicked) {
        var $form = $(btnClicked).parents('form');
        $.ajax({
            type: "POST",
            beforeSend: function () {
                spinnerShow();
            },
            url: $form.attr('action'),
            data: $form.serialize(),
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (response) {
                if (response.status == 'success') {
                    OpenMessegeAutoHideDiv(response.Msg, response.Color );
                    setTimeout(function () { window.location = "../HR_Payroll_LeaveMaster/New"; }, $('#hddnReloadTime').val());
                }
                else {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnModelStateNotValid').val());
                    AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
                    AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
                }
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
</script>

