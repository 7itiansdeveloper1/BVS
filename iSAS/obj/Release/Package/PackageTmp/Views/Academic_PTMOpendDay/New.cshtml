@model ISas.Entities.Academic.Academic_PTMOpendDayEntities
@{
    ViewBag.Title = "New";
}
<section class="content-header">
    <h1>
        PTM DAY <small>(ADD)</small>
    </h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li>School</li>
        <li class="active">PTM DAY <small>(ADD)</small></li>
    </ol>
</section>
<section class="content">
    @using (Html.BeginForm("Academic_PTMOpendDay_CRUD", "Academic_PTMOpendDay", FormMethod.Post, htmlAttributes: new { }))
    {
        @Html.Hidden("hddnCopyToClassIds", "")
        <div class="box box-success">
            <div class="box-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Category)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.Category, new SelectList(Model.AttenCategoryList, "Value", "Text"), htmlAttributes: new { @class = "form-control select2", style = "width:100%;", onchange = "GetAttenDayList()" })
                                @Html.ValidationMessageFor(r => Model.Category, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.ClassId)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.ClassId, new SelectList(Model.ClassList, "Value", "Text"), "--- Select Class ---", htmlAttributes: new { @class = "form-control select2", style = "width:100%;", onchange = "GetAttenDayList()" })
                                @Html.ValidationMessageFor(r => Model.ClassId, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.AttDate)<i class="mandateLbl">*</i></label>
                            <div class="input-group date">
                                <div class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </div>
                                @Html.TextBoxFor(m => m.AttDate, htmlAttributes: new { @class = "form-control pull-right date" })
                                @Html.ValidationMessageFor(r => Model.AttDate, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                            <!-- /.input group -->
                        </div>
                    </div>

                </div>
            </div>
            <div class="box-footer">
                <button class="btn btn-success" id="savebutton" type="button" onclick="DoAjaxPostAndMore(this)">SAVE</button>
                <button class="btn btn-default" type="button" onclick="window.location.reload()">RESET</button>
            </div>
        </div>
    }
    <div class="row">
        <div class="col-md-9">
            <div class="" id="openDayListMainDiv"></div>
        </div>
        <div class="col-md-3">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h5 class="box-title">Copy to Class</h5>
                    <div class="box-title pull-right">
                        <input type="button" id="btnCopyToClass" disabled="disabled" value="Copy To Class" class="btn btn-success btn-xs" onclick="SaveCopyToClass()" />
                    </div>
                </div>
                <div class="box-body">
                    <table class="table table-bordered table-responsive table-hover table-condensed" id="tblCopyToClass">
                        <thead>
                            <tr>
                                <th>
                                    <input type="checkbox" id="chkBoxSelectAll" onclick="CheckToSelectAll()" />
                                </th>
                                <th>Class</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.CopyToClassList.Count; i++)
                            {
                                <tr>
                                    <td>
                                        @Html.HiddenFor(r => Model.CopyToClassList[i].Value)
                                        @Html.HiddenFor(r => Model.CopyToClassList[i].Text)
                                        @Html.CheckBoxFor(r => Model.CopyToClassList[i].Selected, htmlAttributes: new { @class = "clssChkBoxCopyTo", onchange = "GetClassIdStr(" + @i + ")" })
                                    </td>
                                    <td>@Html.DisplayFor(r => Model.CopyToClassList[i].Text)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    function CheckToSelectAll() {
        if ($('#chkBoxSelectAll').is(':checked')) {
            $('.clssChkBoxCopyTo').prop('checked', true);
        } else {
            $('.clssChkBoxCopyTo').prop('checked', false);
        }
        GetClassIdStr();
    }
    function GetClassIdStr() {
        var classIds = "";
        $('#tblCopyToClass > tbody > tr').each(function (i) {
            if ($('#CopyToClassList_' + i + '__Selected').is(':checked')) {
                if (classIds == "") {
                    classIds = $('#CopyToClassList_' + i + '__Value').val();
                }
                else {
                    classIds += "," + $('#CopyToClassList_' + i + '__Value').val();
                }
            }
        });
        $('#hddnCopyToClassIds').val(classIds);

        if (classIds == "" || classIds == null) {
            $('#btnCopyToClass').prop('disabled', true);
        } else {
            $('#btnCopyToClass').prop('disabled', false);
        }

    }
    function SaveCopyToClass() {
        if ($('#hddnCopyToClassIds').val() == "" || $('#hddnCopyToClassIds').val() == null) {
            OpenMessegeAutoHideDiv("No Class is Selected to Copy..!", 'Info');
            return false;
        }

        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../Academic_PTMOpendDay/Academic_PTMOpendDay_CopyToClass",
            data: { Category: $('#Category').val(), FromClassId: $('#ClassId').val(), ToClass: $('#hddnCopyToClassIds').val() },
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (result) {
                OpenMessegeAutoHideDiv(result.Msg, result.Color);
            },
            complete: function () {
                spinnerHide();
            }
        });
    }


    function DeleteConfirm(i) {
        AsyncConfirmYesNo("Confirmation", "Are you sure to delete this PTM DAY?", MyYesFunction, MyNoFunction, i);
    }

    function MyYesFunction(i) {
        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../Academic_PTMOpendDay/Academic_PTMOpendDay_Delete",
            data: { ClassId: $('#ClassId_' + i).val(), AttDate: $('#AttDate_' + i).val(), Category: $('#Category_' + i).val() },
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (result) {
                OpenMessegeAutoHideDiv(result.Msg, result.Color);
                GetAttenDayList();
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
    function MyNoFunction() {
        //alert('No Calling');
    }



    function GetAttenDayList() {
        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../Academic_PTMOpendDay/_LandingPage",
            data: { ClassId: $('#ClassId').val(), Category: $('#Category').val() },
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (result) {
                $('#openDayListMainDiv').html(result);
            },
            complete: function () {
                spinnerHide();
            }
        });
    }

    function DoAjaxPostAndMore(btnClicked) {
        var $form = $(btnClicked).parents('form');
        $.ajax({
            type: "POST",
            beforeSend: function () {
                spinnerShow();
            },
            url: $form.attr('action'),
            data: $form.serialize(),
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (response) {
                if (response.status == 'success') {
                    OpenMessegeAutoHideDiv(response.Msg, response.Color);
                    GetAttenDayList();
                }
                else {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnModelStateNotValid').val());
                    AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
                    AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
                }
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
</script>