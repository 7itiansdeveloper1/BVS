@using ISas.Web.Models;
@model ISas.Entities.Academic.Academic_SectionSetupModels
@{
    ViewBag.Title = "New";
}
<section class="content-header">
    <h1>
        Section Setup
    </h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li>School</li>
        <li><a href="@Url.Action("New", "Academic_SchoolSetup")">School Setup</a> </li>
        <li><a href="@Html.EncodedPath("", "New", "Academic_WingSetup", new { SchoolName = Model.SchoolName, SchoolId = Model.SchoolId }, htmlAttributes:new { })">Wing Setup</a> </li>
        <li class="active"><a href="@Html.EncodedPath(" ", "New", "Academic_ClassSetup", new { WingName = Model.WingName, WingId = Model.WingId, SchoolId = Model.SchoolId, SchoolName = Model.SchoolName}, htmlAttributes:new { })">Class Setup</a></li>
        <li class="active">Section Setup</li>
    </ol>
</section>

<section class="content">
    @using (Html.BeginForm("Academic_SectionSetup_CRUD", "Academic_SectionSetup", FormMethod.Post, htmlAttributes: new { }))
    {
        @Html.HiddenFor(r => Model.ClassId)
        @Html.HiddenFor(r => Model.Class_ClassId)
        @Html.HiddenFor(r => Model.Class_Name)
        @Html.HiddenFor(r => Model.Class_Strength)

        @Html.Hidden("hddnTotalClassStrength", 0)
        @Html.Hidden("hddnRowLenght")

        <div class="box box-success">
            <div class="box-header with-border">
                <h5 class="box-title">Class Name :- <strong class="text-primary">@Html.DisplayFor(r => Model.Class_Name)</strong></h5>
                <h5 class="box-title"> &nbsp; Strength :- <strong class="text-primary">@Html.DisplayFor(r => Model.Class_Strength)</strong></h5>
            </div>
            <div class="box-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.SectionId)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.SectionId, new SelectList(Model.SectionList, "Value", "Text"), "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.SectionId, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.MaxStrength)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.MaxStrength, htmlAttributes: new { @class = "form-control", onchange = "CheckStrengthValidation()" })
                                @Html.ValidationMessageFor(r => Model.MaxStrength, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.CT1)</label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.CT1, new SelectList(Model.TeacherList, "Value", "Text"), "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.CT1, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.CT2)</label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.CT2, new SelectList(Model.TeacherList, "Value", "Text"), "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.CT2, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="box-footer">
                <button class="btn btn-success" id="savebutton" type="button" onclick="DoAjaxPostAndMore(this)">SAVE</button>
                <button class="btn btn-default" type="button" onclick="window.location.reload()">RESET</button>
            </div>
        </div>
    }

    <div class="" id="sectionSetupDetailsMainDiv">
        @{ Html.RenderAction("LandingPage", "Academic_SectionSetup", new { Class_Strength = Model.Class_Strength, Class_Name = Model.Class_Name, Class_ClassId = Model.Class_ClassId }); }
    </div>
</section>

<script>
    function emptySectionDetails() {
        $('#SectionId').val("").change();
        $('#MaxStrength').val(0);
    }

    function CheckStrengthValidation() {
        var currentTotalStrenght = parseInt($('#hddnTotalClassStrength').val());
        var classStrength = parseInt($('#Class_Strength').val());
        var newclassStrength = parseInt($('#MaxStrength').val());

        //alert(currentTotalStrenght);
        //alert(classStrength);
        //alert(newclassStrength);

        if ((currentTotalStrenght + newclassStrength) > classStrength) {
            OpenMessegeAutoHideDiv('Class strength exceed the limit..! ', 'Info');
            $('#MaxStrength').val(0);
            return false;
        }
        return true;
    }

    function getSectionSetupDetails() {
        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../Academic_SectionSetup/LandingPage",
            data: { Class_Strength: $('#Class_Strength').val(), Class_Name: $('#Class_Name').val(), Class_ClassId: $('#Class_ClassId').val() },
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (result) {
                $('#sectionSetupDetailsMainDiv').html(result);
            },
            complete: function () {
                spinnerHide();
            }
        });
    }

    function EnableEditableRow(selectedRow) {
        var rowCount = $('#hddnRowLenght').val();
        for (var i = 0; i < rowCount; i++) {
            if (i == selectedRow) {
                $('.editableFeild_' + i).attr('readonly', false);
                $('.editableFeild_Disabled_' + i).attr('disabled', false);
                $('#btnEdit_' + i).css('display', 'none');
                $('#btnSave_' + i).removeAttr('style');
            } else {
                $('.editableFeild_' + i).attr('readonly', true);
                $('.editableFeild_Disabled_' + i).attr('disabled', true);
                $('#btnSave_' + i).css('display', 'none');
                $('#btnEdit_' + i).removeAttr('style');
            }
        }
    }


    function DeleteSectionSetupConfirm(i) {
        AsyncConfirmYesNo("Confirmation", "Are you sure to delete this Section?", MyYesFunction, MyNoFunction, i);
    }

    function MyYesFunction(i) {
        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../Academic_SectionSetup/Academic_SectionSetup_Delete",
            data: { ClassId: $('#ClassId_' + i).val(), SectionId: $('#SectionId_' + i).val() },
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (result) {
                OpenMessegeAutoHideDiv(result.Msg, result.Color);
                getSectionSetupDetails();
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
    function MyNoFunction() {
        //alert('No Calling');
    }

    function UpdateSectionSetup(i) {
        var currentStrength = parseInt($('#CurrentStrength_' + i).val());
        var newStrength = parseInt($('#MaxStrength_' + i).val());

        if (newStrength < currentStrength) {
            OpenMessegeAutoHideDiv('Strenth should not be less than current strength..!', 'Info');
            return false;
        }

        $.ajax({
            type: "POST",
            beforeSend: function () {
                spinnerShow();
            },
            url: '../Academic_SectionSetup/Academic_SectionSetup_CRUD',
            data: {
                ClassId: $('#ClassId_' + i).val(), SectionId: $('#SectionId_' + i).val(),
                MaxStrength: $('#MaxStrength_' + i).val(),
                CT1: $('#CT1_' + i).val(),
                CT2: $('#CT2_' + i).val(),
            },
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (response) {
                if (response.status == 'success') {
                    OpenMessegeAutoHideDiv(response.Msg, response.Color);
                    getSectionSetupDetails();
                }
                else {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnModelStateNotValid').val());
                    AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
                    AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
                }
            },
            complete: function () {
                spinnerHide();
            }
        });
        return false;
    }

    function DoAjaxPostAndMore(btnClicked) {
        if (CheckStrengthValidation()) {
            var $form = $(btnClicked).parents('form');
            $.ajax({
                type: "POST",
                beforeSend: function () {
                    spinnerShow();
                },
                url: $form.attr('action'),
                data: $form.serialize(),
                error: function (xhr, status, error) {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
                },
                success: function (response) {
                    if (response.status == 'success') {
                        OpenMessegeAutoHideDiv(response.Msg, response.Color);
                        getSectionSetupDetails();
                        emptySectionDetails();
                    }
                    else {
                        OpenMessegeAutoHideDiv($('#ErrorMsgOnModelStateNotValid').val());
                        AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
                        AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
                    }
                },
                complete: function () {
                    spinnerHide();
                }
            });
        }
    }
</script>