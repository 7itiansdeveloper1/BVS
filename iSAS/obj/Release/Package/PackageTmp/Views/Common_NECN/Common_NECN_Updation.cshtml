@model ISas.Entities.DashboardEntities.Common_NECN_MainModel
@{
    var controllerName = HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString();

    List<SelectListGroup> classGroupList = Model.SelectionGroups.ClassList.Select(r => r.Text.Substring(0, r.Text.Length - 2)).Distinct().Select(r => new SelectListGroup
    {
        Name = r,
        Disabled = false
    }).ToList();

    for (int i = 0; i < Model.SelectionGroups.ClassList.Count; i++)
    {
        string className = Model.SelectionGroups.ClassList[i].Text.Substring(0, Model.SelectionGroups.ClassList[i].Text.Length - 2);
        Model.SelectionGroups.ClassList[i].Group = classGroupList.Where(r => className == r.Name).FirstOrDefault();
    }
}
<section class="content-header">
    <h1>
        @controllerName <small>UPDATE</small>
    </h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li>School</li>
        <li><a href="@Url.Action("LandingPage",controllerName)">@controllerName</a></li>
        <li class="active">UPDATE</li>
    </ol>
</section>

<section class="content">
    <div class="row">
        <div class="col-md-12">
            <div class="box box-primary">
                @using (Html.BeginForm("Common_NECN_CRUD", controllerName, FormMethod.Post, htmlAttributes: new { id = "form1" }))
                {
                    @Html.HiddenFor(r => Model.BasicDetails.UploadID)
                    @Html.HiddenFor(r => Model.Function)
                    @Html.HiddenFor(r => Model.UploadType)
                    <div class="box-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col-xs-12 col-sm-12 col-md-12">
                                        <div class="form-group">
                                            <label for="">@Html.LabelFor(r => Model.BasicDetails.UploadTitle)</label>
                                            <div class="select">
                                                @Html.TextBoxFor(m => m.BasicDetails.UploadTitle, htmlAttributes: new { @class = "form-control" })
                                                @Html.ValidationMessageFor(r => Model.BasicDetails.UploadTitle, null, htmlAttributes: new { style = "color:red;" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-xs-12 col-sm-12 col-md-12">
                                        <div class="form-group">
                                            <label for="">@Html.LabelFor(r => Model.BasicDetails.UploadDescription)</label>
                                            <div class="select">
                                                @Html.TextAreaFor(m => m.BasicDetails.UploadDescription, htmlAttributes: new { @class = "form-control", style = "height:112px;" })
                                                @Html.ValidationMessageFor(r => Model.BasicDetails.UploadDescription, null, htmlAttributes: new { style = "color:red;" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-xs-12 col-sm-6 col-md-4">
                                        <div class="form-group">
                                            <label for="">@Html.LabelFor(r => Model.BasicDetails.CreationDate)</label>
                                            <div class="input-group date">
                                                <div class="input-group-addon">
                                                    <i class="fa fa-calendar"></i>
                                                </div>
                                                @Html.TextBoxFor(m => m.BasicDetails.CreationDate, htmlAttributes: new { @class = "form-control pull-right date" })
                                                @Html.ValidationMessageFor(r => Model.BasicDetails.CreationDate, null, htmlAttributes: new { style = "color:red;" })
                                            </div>
                                            <!-- /.input group -->
                                        </div>
                                    </div>
                                    <div class="col-xs-12 col-sm-6 col-md-4">
                                        <div class="form-group">
                                            <label for="">@Html.LabelFor(r => Model.BasicDetails.UploadStartDate)</label>
                                            <div class="input-group date">
                                                <div class="input-group-addon">
                                                    <i class="fa fa-calendar"></i>
                                                </div>
                                                @Html.TextBoxFor(m => m.BasicDetails.UploadStartDate, htmlAttributes: new { @class = "form-control date" })
                                                @Html.ValidationMessageFor(r => Model.BasicDetails.UploadStartDate, null, htmlAttributes: new { style = "color:red;" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-xs-12 col-sm-6 col-md-4">
                                        <div class="form-group">
                                            <label for="">@Html.LabelFor(r => Model.BasicDetails.UploadEndDate)</label>
                                            <div class="input-group date">
                                                <div class="input-group-addon">
                                                    <i class="fa fa-calendar"></i>
                                                </div>
                                                @Html.TextBoxFor(m => m.BasicDetails.UploadEndDate, htmlAttributes: new { @class = "form-control date" })
                                                @Html.ValidationMessageFor(r => Model.BasicDetails.UploadEndDate, null, htmlAttributes: new { style = "color:red;" })
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="row">
                                    <div class=" col-xs-12 col-sm-6 col-md-9">
                                        <div class="form-group">
                                            <label for=""> @Html.LabelFor(r => Model.SelectionGroups.UploadedBy) <i class="mandateLbl">*</i> </label>
                                            <div class="select">
                                                @Html.DropDownListFor(m => m.SelectionGroups.UploadedBy, new SelectList(Model.SelectionGroups.UploadedByList, "Value", "Text", Model.SelectionGroups.UploadedByList.Where(p => p.Selected == true).Select(p => p.Value).FirstOrDefault()), htmlAttributes: new { @class = "form-control select2", style = "width:100%" })
                                                @Html.ValidationMessageFor(r => r.SelectionGroups.UploadedBy, null, htmlAttributes: new { Style = "color:red;" })
                                            </div>
                                        </div>
                                    </div>
                                    
                                    

                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="row">
                                            <div class="col-xs-12 col-sm-12 col-md-12">
                                                <div class="form-group">
                                                    <label for="">@Html.LabelFor(r => Model.BasicDetails.UploadTitle, "Upload Documents") :  Max Size : 10 mb approx., <br /> Format Supported : '.jpeg, .png, .gif, .text, .xlsx, .docx, .ppt, .pdf' </label>
                                                    <div class="select">
                                                        <input type="file" class="upload" id="uploadCaptureInputFile" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12" style="overflow-y:auto;max-height:300px;" id="UploadDocDetailsMainDiv">
                                                @Html.Partial("~/Views/Common_NECN/_Common_NECN_UploadedDocDetails.cshtml", Model)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col-xs-12 col-sm-12 col-md-6">
                                        <div class="form-group">
                                            <label for="">@Html.LabelFor(r => Model.WingIds)</label>
                                            <div class="select">
                                                @Html.ListBoxFor(r => Model.WingIds, new MultiSelectList(Model.SelectionGroups.WingList, "Value", "Text", Model.WingIds), htmlAttributes: new { @class = "form-control multiselectdropdown", multiple = true })
                                                @Html.ValidationMessageFor(r => Model.WingIds, null, htmlAttributes: new { style = "color:red;" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-xs-12 col-sm-12 col-md-6">
                                        <div class="form-group">
                                            <label for="">@Html.LabelFor(r => Model.DeprtmentIds)</label>
                                            <div class="select">
                                                @Html.ListBoxFor(r => Model.DeprtmentIds, new MultiSelectList(Model.SelectionGroups.DeptList, "Value", "Text", Model.DeprtmentIds), htmlAttributes: new { @class = "form-control multiselectdropdown", multiple = true })
                                                @Html.ValidationMessageFor(r => Model.DeprtmentIds, null, htmlAttributes: new { style = "color:red;" })
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="row">
                                    <div class="col-xs-12 col-sm-12 col-md-6">
                                        <div class="form-group">
                                            <label for="">@Html.LabelFor(r => Model.ClassIds)</label>
                                            <div class="select">
                                                @Html.ListBoxFor(r => Model.ClassIds, Model.SelectionGroups.ClassList, htmlAttributes: new { @class = "form-control multiSelectWithSelectOptGrp", multiple = true })
                                                @Html.ValidationMessageFor(r => Model.ClassIds, null, htmlAttributes: new { style = "color:red;" })
                                                <span style="cursor:pointer;" class="btn btn-success fa fa-search" onclick="GetStudentDetails()"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-xs-12 col-sm-12 col-md-6">
                                        <div class="form-group">
                                            <label for="">@Html.LabelFor(r => Model.StaffIds)</label>
                                            <div class="select">
                                                @Html.ListBoxFor(r => Model.StaffIds, new MultiSelectList(Model.SelectionGroups.StaffList, "Value", "Text", Model.StaffIds), htmlAttributes: new { @class = "form-control multiselectdropdown", multiple = true })
                                                @Html.ValidationMessageFor(r => Model.StaffIds, null, htmlAttributes: new { style = "color:red;" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                @*<div class="row">
            <div class="col-md-12">
                <span style="cursor:pointer;" class="pull-right btn btn-success btn-sm fa fa-search" onclick="GetStudentDetails()"></span>
            </div>
        </div>*@
                                <div class="row">
                                    <div class="col-md-12">
                                        <div id="studentDetailsMainDiv">  @Html.Partial("~/Views/Common_NECN/_Common_NECN_StudentDetails.cshtml", Model)</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        
                    </div>
                    <!-- /.box-body -->
                    <div class="box-footer">
                        <div class="row">
                            <div class="col-xs-12 col-sm-6 col-md-9">
                                <div class="form-group">
                                    <label for="">@Html.LabelFor(r => Model.BasicDetails.IsExpiry)</label>
                                    <div class="select">
                                        @Html.CheckBoxFor(m => m.BasicDetails.IsExpiry, htmlAttributes: new { })
                                        @Html.ValidationMessageFor(r => Model.BasicDetails.IsExpiry, null, htmlAttributes: new { style = "color:red;" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-xs-12 col-sm-6 col-md-3">
                                <button class="btn btn-warning" id="savebutton" type="button" onclick="DoAjaxPostAndMore(this)">UPDATE</button>
                                <button class="btn btn-default" type="button" onclick="window.location.reload()">RESET</button>
                            </div>
                            </div>
                        </div>
                        }
                    </div>
        </div>
    </div>
</section>

<script>
    function funSelectAllStudent() {
        if ($('#allStudentSelectChkBox').is(':checked')) {
            $('.studentSelectchkBox').prop('checked', true);
            funGetSelectedStudentCount();
        } else {
            $('.studentSelectchkBox').prop('checked', false);
            $('#studentSelectedCount').html(0);
        }
    }
    function funGetSelectedStudentCount() {
        var selectedCount = 0;
        $('#tblStudentList > tbody > tr').each(function (i) {
            if ($('#SelectionGroups_StudentDetailsList_' + i + '__Selected').is(':checked')) {
                selectedCount++;
            }
        });
        $('#studentSelectedCount').html(selectedCount);
    }
</script>
<script>
        $('.upload').on('change', function (e) {
            var files = e.target.files;
            if (files.length > 0) {
                if (window.FormData !== undefined) {
                    var data = new FormData();
                    for (var x = 0; x < files.length; x++) {
                        data.append("id" + x, files[x]);
                    }
                    data.append('UploadID', 'TEMPUPLOADID');
                    $.ajax({
                        type: "POST",
                        beforeSend: function () {
                            spinnerShow();
                        },
                        url: '@Url.Action("_UploadedDocDetails", @controllerName)',
                        contentType: false,
                        processData: false,
                        data: data,
                        error: function (xhr, ajaxOptions, thrownError) {
                            OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
                        },
                        success: function (result) {
                            if (result.status == "Failled") {
                                OpenMessegeAutoHideDiv(result.Msg, 'Warning');
                            } else {
                                document.getElementById("uploadCaptureInputFile").value = "";
                                $('#UploadDocDetailsMainDiv').html(result);
                            }
                        },
                        complete: function () {
                            spinnerHide();
                        }
                    });
                } else {
                    OpenMessegeAutoHideDiv('This browser doesn' + 't support HTML5 file uploads!', 'Warning', 'sm');
                }
            }
        });
</script>
<script>
        function GetStudentDetails() {
            var classIds = "";
            if ($('#ClassIds').val() != null) {
                classIds = $('#ClassIds').val().join(",")
            }
            if (classIds == "" || classIds == null) {
                OpenMessegeAutoHideDiv('Select at least one class..!');
                return false;
            }
            $.ajax({
                type: "GET",
                beforeSend: function () {
                    spinnerShow();
                },
                url: "../@controllerName/_StudentDetails",
                data: { ClassIds: classIds },
                error: function (xhr, status, error) {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
                },
                success: function (response) {
                    $('#studentDetailsMainDiv').html(response);
                },
                complete: function () {
                    spinnerHide();
                }
            });
        }

        function DoAjaxPostAndMore(btnClicked) {
            var $form = $(btnClicked).parents('form');
            $.ajax({
                type: "POST",
                beforeSend: function () {
                    spinnerShow();
                },
                url: $form.attr('action'),
                data: $form.serialize(),
                error: function (xhr, status, error) {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
                },
                success: function (response) {
                    if (response.status == 'success') {
                        OpenMessegeAutoHideDiv(response.Msg, response.Color);
                        setTimeout(function () { window.location.reload(); }, $('#hddnReloadTime').val());
                    } else if (response.status == 'failed_NoSelect') {
                        OpenMessegeAutoHideDiv(response.Msg, 'Warning');
                    }
                    else {
                        AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
                        AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
                    }
                },
                complete: function () {
                    spinnerHide();
                }
            });
            return false;
        }
</script>