@model ISas.Entities.FeesEntities.Fee_ReceiptHeaderMasterModels
@{
    ViewBag.Title = "New";
    List<SelectListItem> headerFor = new List<SelectListItem>();
    headerFor.Add(new SelectListItem { Text = "FEE", Value = "FEE" });
    headerFor.Add(new SelectListItem { Text = "TRANSPORT", Value = "TRN" });
}

<section class="content-header">
    <h1>Receipt Header <small>ADD/UPDATE</small> </h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li>Fee</li>
        <li><a href="@Url.Action("LandingPage", "Fee_ReceiptHeaderMaster")">Receipt Header</a></li>
        <li>Add</li>
    </ol>
</section>
<section class="content">
    @using (Html.BeginForm("Fee_ReceiptHeaderMaster_CRUD", "Fee_ReceiptHeaderMaster", FormMethod.Post, htmlAttributes: new { }))
    {
        @*@Html.HiddenFor(r => Model.HeaderId)*@
        @Html.HiddenFor(r => Model.Logo)
        <div class="box box-success">
            <div class="box-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Header1)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.Header1, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(r => Model.Header1, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Header2)</label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.Header2, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(r => Model.Header2, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Header3)</label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.Header3, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(r => Model.Header3, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Header4)</label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.Header4, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(r => Model.Header4, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Logo)</label>
                            <div class="select">
                                <img style="border:1px solid black;" id="imgLogo" src="~/@Model.Logo" width="100" height="100" />
                                <input style="display:none;" name="UploadFile" id="UploadFile" type="file" class="upload" />
                                @Html.ValidationMessageFor(r => Model.Logo, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="checkbox">
                            <br /><label>
                                @Html.CheckBoxFor(r => Model.UsePrefix)@Html.LabelFor(r => Model.UsePrefix)
                            </label>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Prefix)</label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.Prefix, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(r => Model.Prefix, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.ReceiptStartNo)</label>
                            <div class="select">
                                <input type="number" id="ReceiptStartNo" name="ReceiptStartNo" value="@Model.ReceiptStartNo" class="form-control" />
                                @Html.ValidationMessageFor(r => Model.ReceiptStartNo, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.HeaderFor)</label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.HeaderFor, new SelectList(@headerFor, "Value", "Text"), htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.HeaderFor, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        @if (Model.IsEnable)
                        {
                            <label for="">@Html.LabelFor(r => Model.IsEnableStr)</label> <br />
                            <label class="switch">
                                <input id="IsEnableStr" name="IsEnableStr" type="checkbox" checked="checked">
                                <span class="slider round"></span>
                            </label>
                        }
                        else
                        {
                            <label for="">@Html.LabelFor(r => Model.IsEnableStr)</label> <br />
                            <label class="switch">
                                <input id="IsEnableStr" name="IsEnableStr" type="checkbox">
                                <span class="slider round"></span>
                            </label>
                        }
                    </div>
                </div>
            </div>
            <div class="box-footer">
                <button class="btn btn-success" id="savebutton" type="button" onclick="DoAjaxPostAndMore(this)">SAVE</button>
                <button class="btn btn-default" type="button" onclick="window.location.reload()">RESET</button>
            </div>
        </div>
    }
</section>

<script type="text/javascript">
    $('#imgLogo').click(function () { $('#UploadFile').trigger('click'); });
    var data = new FormData();
    $('.upload').on('change', function (e) {
        var currentImageID = "imgLogo";
        if (this.files && this.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#' + currentImageID)
                    .attr('src', e.target.result)
                    .width(120)
                    .height(100);
            };
            reader.readAsDataURL(this.files[0]);
        }

        var files = e.target.files;
        if (files.length > 0) {
            data = new FormData();
            if (window.FormData !== undefined) {
                for (var x = 0; x < files.length; x++) {
                    data.append("id" + x, files[x]);
                }
            } else {
                OpenMessegeAutoHideDiv("This browser doesn't support HTML5 file uploads!", 'Info');
            }
        }
    });
</script>

<script>
    function DoAjaxPostAndMore(btnClicked) {
        var $form = $(btnClicked).parents('form');
        $.each($form.serializeArray(), function (key, input) {
            if (data.has(input.name)) {
                data.set(input.name, input.value);
            } else {
                data.append(input.name, input.value);
            }
        });

        $.ajax({
            type: "POST",
            beforeSend: function () {
                spinnerShow();
            },
            url: $form.attr('action'),
            dataType: 'json',
            contentType: false,
            processData: false,
            data: data,
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (response) {
                if (response.status == 'success') {
                    OpenMessegeAutoHideDiv(response.Msg, response.Color);
                    setTimeout(function () { window.location.reload(); }, $('#hddnReloadTime').val());
                }
                else {
                    AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
                    AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
                }
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
</script>

