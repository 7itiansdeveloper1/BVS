@model ISas.Entities.Academic.Academic_SyllabusMasterModels
@{
    Model.ReturnViewName = "Update";
}
<script src="~/bower_components/ckeditor/ckeditor.js"></script>
<section class="content-header">
    <h1>Syllabus Master<small>UPDATE</small> </h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li>School</li>d
        <li class="active"><a href="@Url.Action("LandingPage", "Academic_SyllabusMaster")">Syllabus Master</a></li>
        <li class="active">UPDATE</li>
    </ol>
</section>
<section class="content">
    @using (Html.BeginForm("Academic_SyllabusMaster_CRUD", "Academic_SyllabusMaster", FormMethod.Post, htmlAttributes: new { enctype = "multipart/form-data" }))
    {
        @Html.HiddenFor(r => Model.ReturnViewName)
        @Html.HiddenFor(r => Model.SyllabusId)
        @Html.HiddenFor(r => Model.textEditorPDFFilePath)
        @Html.HiddenFor(r => Model.AttachmentReference)


        <div class="box box-warning">
            <div class="box-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Title)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.Title, htmlAttributes: new { @class = "form-control", autocomplete = "off" })
                                @Html.ValidationMessageFor(r => Model.Title, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>

                    <div class="col-xs-12 col-sm-12 col-md-3">
                        <div class="form-group ">
                            <label for="">@Html.LabelFor(r => Model.SubjectId)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.SubjectId, new SelectList(Model.SubjectList, "Value", "Text"), "-- All Subject --", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.SubjectId, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-3">
                        <div class="form-group ">
                            <label for="">@Html.LabelFor(r => Model.ClassId)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.ClassId, new SelectList(Model.ClassList, "Value", "Text"), "-- Select Class --", htmlAttributes: new { @class = "form-control select2", style = "width:100%;", onchange = "getStudentList()" })
                                @Html.ValidationMessageFor(r => Model.ClassId, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-3">
                        <div class="form-group ">
                            <label for="">@Html.LabelFor(r => Model.UploadedBy)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.UploadedBy, new SelectList(Model.UploadedByList, "Value", "Text"), "-- Select Uploaded By --", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.UploadedBy, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.UploadDate)<i class="mandateLbl">*</i></label>
                            <div class="input-group date">
                                <div class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </div>
                                @Html.TextBoxFor(m => m.UploadDate, htmlAttributes: new { @class = "form-control pull-right date" })
                                @Html.ValidationMessageFor(r => Model.UploadDate, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                            <!-- /.input group -->
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <div class="checkbox">
                                <label>&nbsp;</label><br />
                                <label>@Html.CheckBoxFor(m => m.IsActive, htmlAttributes: new { @class = "" }) @Html.DisplayNameFor(r => Model.IsActive)</label>
                                @Html.ValidationMessageFor(r => Model.UploadDate, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                  

                </div>
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-3">
                        <br /> <br />
                        <div class="form-group ">
                            <input multiple type="file" id="files" name="files" accept="image/png, image/jpeg" />
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        <br /> <br />
                        <div class="form-group">
                            @if (!string.IsNullOrEmpty(Model.AttachmentReference))
                            {
                                List<string> attachments = Model.AttachmentReference.Split(',').ToList();
                                for (int j = 0; j < attachments.Count; j++)
                                {
                                    <i class="fa fa-paperclip" title="Click here to download attachment"><a class="text-sm" href="~/@attachments[j]" download="@attachments[j].Substring(@attachments[j].LastIndexOf('@') + 1)">@attachments[j].Substring(@attachments[j].LastIndexOf('@') + 1)</a></i>
                                    <a href="#" onclick="DeleteAttachmentConfirm('@attachments[j]')" class="fa fa-trash text-danger" title="Remove Attachment"></a>
                                }
                            }
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.textEditorPDFFilePath))
                    {
                        <div class="col-md-3">
                            <br /><br />
                            <div class="pull-right">
                                <a title="Click here to download generated pdf" class="text-sm btnDefaultColor" href="~/@Model.textEditorPDFFilePath" download="@Model.textEditorPDFFilePath"><i class="fa fa-file-pdf-o"></i></a>
                            </div>
                        </div>
                    }
                </div>

                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-12">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Discription) </label>
                            <div class="select">
                                @Html.TextAreaFor(m => m.Discription, htmlAttributes: new { @class = "form-control ckeditor" })
                                @Html.ValidationMessageFor(r => Model.Discription, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="box-footer">
                <button class="btn btn-warning" id="savebutton" type="submit">UPDATE</button>
                <button class="btn btn-default" type="button" onclick="window.location.reload();">RESET</button> @*window.location.reload()*@
            </div>
        </div>
    }
</section>

<script>
    function DeleteAttachmentConfirm(AttachmentRef) {
        AsyncConfirmYesNo("Confirmation", "Are you sure to permanently delete this Attachment?", MyYesFunction, MyNoFunction, AttachmentRef);
    }

    function MyYesFunction(AttachmentRef) {
        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../Academic_SyllabusMaster/Academic_SyllabusMaster_RemoveAttachment",
            data: { SyllabusId : '@Model.SyllabusId', ToBeRemovedAttach: AttachmentRef, AllAttachments : '@Model.AttachmentReference' },
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (response) {
                if (response.status == 'success') {
                    OpenMessegeAutoHideDiv(response.Msg, response.Color);
                    window.location.reload();
                }
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
    function MyNoFunction() {
        //alert('No Calling');
    }
</script>