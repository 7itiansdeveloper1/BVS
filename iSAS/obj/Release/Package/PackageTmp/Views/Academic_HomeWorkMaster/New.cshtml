@model ISas.Entities.Academic.Academic_HomeWorkMasterModels
@{
    List<SelectListItem> categoryList = new List<SelectListItem>();
    categoryList.Add(new SelectListItem { Text = "Home Work", Value = "HW", Selected = true });
    categoryList.Add(new SelectListItem { Text = "Class Notes", Value = "CN" });
    Model.ReturnViewName = "New";

    List<SelectListGroup> classGroupList = Model.ClassList.Select(r => r.Text.Substring(0, r.Text.Length - 2)).Distinct().Select(r => new SelectListGroup
    {
        Name = r,
        Disabled = false
    }).ToList();

    for (int i = 0; i < Model.ClassList.Count; i++)
    {
        string className = Model.ClassList[i].Text.Substring(0, Model.ClassList[i].Text.Length - 2);
        Model.ClassList[i].Group = classGroupList.Where(r => className == r.Name).FirstOrDefault();
    }
}
<script src="~/bower_components/ckeditor/ckeditor.js"></script>
<section class="content-header">
    <h1>Class Notes/Homework <small>ADD NEW</small> </h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li>School</li>d
        <li class="active"><a href="@Url.Action("LandingPage", "Academic_HomeWorkMaster")">Class Notes/Homework</a></li>
        <li class="active">ADD NEW</li>
    </ol>
</section>

<section class="content">
    @using (Html.BeginForm("Academic_HomeWorkMaster_CRUD", "Academic_HomeWorkMaster", FormMethod.Post, htmlAttributes: new { enctype = "multipart/form-data" }))
    {
        @Html.HiddenFor(r => Model.HomeWorkId)
        @Html.HiddenFor(r => Model.ReturnViewName)
        <div class="box box-success">
            <div class="box-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Title)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.Title, htmlAttributes: new { @class = "form-control", autocomplete = "off" })
                                @Html.ValidationMessageFor(r => Model.Title, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-3">
                        <div class="form-group ">
                            <label for="">@Html.LabelFor(r => Model.CategoryId)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.CategoryId, new SelectList(categoryList, "Value", "Text"), htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.CategoryId, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.UploadDate)<i class="mandateLbl">*</i></label>
                            <div class="input-group date">
                                <div class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </div>
                                @Html.TextBoxFor(m => m.UploadDate, htmlAttributes: new { @class = "form-control pull-right date" })
                                @Html.ValidationMessageFor(r => Model.UploadDate, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                            <!-- /.input group -->
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-3">
                        <div class="form-group ">
                            <label for="">@Html.LabelFor(r => Model.SubjectId)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.SubjectId, new SelectList(Model.SubjectList, "Value", "Text"), "-- All Subject --", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.SubjectId, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-3">
                        <div class="form-group ">


                            <label class="col-md-12" style="margin-left:-6%;">
                                <span class="pull-left"> @Html.LabelFor(r => Model.ClassSectionId)<i class="mandateLbl">*</i></span>
                                <span class="pull-right"> @Html.CheckBoxFor(r => Model.AllStudent, htmlAttributes: new { onchange = "getStudentList()" }) @Html.DisplayNameFor(r => Model.AllStudent)</span>
                            </label>




                            @*<div class="select">
                                @Html.DropDownListFor(m => m.ClassSectionId, new SelectList(Model.ClassList, "Value", "Text"), "-- Select Class --", htmlAttributes: new { @class = "form-control select2", style = "width:100%;", onchange = "getStudentList()" })
                                @Html.ValidationMessageFor(r => Model.ClassSectionId, null, htmlAttributes: new { style = "color:red;" })
                            </div>*@
                            
                            @*<div class="select">
                                @Html.DropDownListFor(m => m.ClassSectionId, Model.ClassList , htmlAttributes: new { @class = "form-control multiSelectWithSelectOptGrp",multiple=true, style = "width:100%;"})
                                @Html.ValidationMessageFor(r => Model.ClassSectionId, null, htmlAttributes: new { style = "color:red;" })
                            </div>*@

                            <div class="select">
                                @Html.ListBoxFor(r => Model.ClassSectionId, Model.ClassList, htmlAttributes: new { @class = "form-control multiSelectWithSelectOptGrp", multiple = true })
                                @Html.ValidationMessageFor(r => Model.ClassSectionId, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                          
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-3">
                        <div class="form-group ">
                            <label for="">@Html.LabelFor(r => Model.StudentId)</label>

                            <div class="select">
                                @Html.ListBoxFor(m => m.StudentId, new SelectList(string.Empty, "", ""), htmlAttributes: new { @class = "form-control multiselectdropdown", style = "width:100%;", multiple = true, disabled = true })
                                @Html.ValidationMessageFor(r => Model.StudentId, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                       
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-3">
                        <div class="form-group ">
                            <label for="">@Html.LabelFor(r => Model.UploadedBy)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.UploadedBy, new SelectList(Model.UploadedByList, "Value", "Text"), "-- Select Uploaded By --", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.UploadedBy, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">Students' Submission Date<i class="mandateLbl">*</i></label>
                            <div class="input-group date">
                                <div class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </div>
                                @Html.TextBoxFor(m => m.SubmissionDate, htmlAttributes: new { @class = "form-control pull-right date" })
                                @Html.ValidationMessageFor(r => Model.SubmissionDate, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                            <!-- /.input group -->
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-3">
                        <br /> <br />
                        <div class="form-group ">
                            <input multiple type="file" id="files" name="files" accept="image/png, image/jpeg" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-12">
                        <div class="form-group">
                            <label for="">Description</label>
                            <div class="select">
                                @Html.TextAreaFor(m => m.Discription, htmlAttributes: new { @class = "form-control ckeditor" })
                                @Html.ValidationMessageFor(r => Model.Discription, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="box-footer">
                <button class="btn btn-success" id="savebutton" type="submit" >SAVE</button>
                <button class="btn btn-default" type="button" onclick="window.location.reload();">RESET</button> @*window.location.reload()*@
            </div>
        </div>
    }
</section>

<script>

    function getClassIds() {
        var classIds = "";
        if ($('#ClassSectionId').val() != null) {
            classIds = $('#ClassSectionId').val().join(",")
    }

    function getStudentList() {

        

        if ($('#AllStudent').is(':checked')) {

            //$('#selectStudentDiv').hide();
            $('#StudentId').empty();
            $('#StudentId').val(null);
            $('#StudentId').prop('disabled', true);
            $('#StudentId').multiselect('rebuild');
        } else {

            $.ajax({
                url: '../Academic_HomeWorkMaster/Get_StudentListByClassSectionId',
                type: 'GET',
                data: { ClassSectionId: $('#ClassSectionId').val() },
                dataType: 'json',
                success: function (data) {
                    $('#StudentId').empty();
                    $('#StudentId').val(null);
                    //$('#selectStudentDiv').show();

                    $('#StudentId').prop('disabled', false);
                    var dataObj = data;
                    var optionHtml = "";
                    for (var i = 0; i < dataObj.length; i++) {
                        optionHtml += '<option value="' + dataObj[i].Value + '">' + dataObj[i].Text + '</option>';
                    }
                    $("#StudentId").html(optionHtml);
                    $('#StudentId').multiselect('rebuild');
                }
            });
        }
    }

    //function DoAjaxPostAndMore(btnClicked) {

    //    var $form = $(btnClicked).parents('form');
    //        $.ajax({
    //            type: "POST",
    //            beforeSend: function () {
    //                spinnerShow();
    //            },
    //            url: $form.attr('action'),
    //            data: $form.serialize(),
    //            error: function (xhr, status, error) {
    //                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
    //            },
    //            success: function (response) {
    //                if (response.status == 'success') {
    //                    OpenMessegeAutoHideDiv(response.Msg, response.Color);
    //                    setTimeout(function () { window.location = "../Academic_HomeWorkMaster/New"; }, $('#hddnReloadTime').val());
    //                } else if (response.status == 'failed_NoSelect') {
    //                    OpenMessegeAutoHideDiv(response.Msg, 'Warning');
    //                }
    //                else {
    //                    AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
    //                    AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
    //                }
    //            },
    //            complete: function () {
    //                spinnerHide();
    //            }
    //        });
    //        return false;
    //    }

</script>