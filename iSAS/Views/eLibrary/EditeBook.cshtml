@model ISas.Entities.LibraryEntities.eLibraryModels
@{
    ViewBag.Title = "EDIT EBOOK";

    List<SelectListItem> bookTypeList = new List<SelectListItem>();
    bookTypeList.Add(new SelectListItem { Text = "TEXT", Value = "TEXT", Selected = true });
    bookTypeList.Add(new SelectListItem { Text = "REF", Value = "REF" });
}
<section class="content-header">
    <h1>
        E-BOOK <small>(ADD)</small>
    </h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li>Library</li>
        <li><a href="@Url.Action("EBookLanding", "eLibrary")">E-Library</a></li>
        <li class="active">Edit E-Book</li>
    </ol>
</section>

<section class="content">
    @using (Html.BeginForm("eBook_CRUD", "eLibrary", FormMethod.Post, htmlAttributes: new { id = "form1" }))
    {
        @Html.HiddenFor(r => r.Function)
        @Html.HiddenFor(r => r.eLibraryBook.eBookNo)
        <div class="box box-success">
            <div class="box-header with-border">
                <h5 class="box-title">ADD NEW E-BOOK</h5>
            </div>

            <div class="box-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.eLibraryBook.eBookClassId)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.ListBoxFor(r => Model.eLibraryBook.eBookClassId, Model.classList, htmlAttributes: new { @class = "form-control multiSelectWithSelectOptGrp", multiple = true })
                                @Html.ValidationMessageFor(r => Model.eLibraryBook.eBookClassId, null, htmlAttributes: new { style = "color:red;" })
                            </div>

                        </div>
                    </div>
                </div>


                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-md-6">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.eLibraryBook.eBookName)<i class="mandateLbl">*</i></label>
                            @Html.TextBoxFor(m => Model.eLibraryBook.eBookName, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(r => Model.eLibraryBook.eBookName, null, htmlAttributes: new { style = "color:red;" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.eLibraryBook.eBookType)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => Model.eLibraryBook.eBookType, bookTypeList, htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.eLibraryBook.eBookType, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.eLibraryBook.eBookSubjectId)</label>
                            <div class="select">
                                @Html.DropDownListFor(m => Model.eLibraryBook.eBookSubjectId, Model.subjectList, "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })

                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">

                    <div class="col-xs-12 col-sm-12 col-md-6">
                        <br /> <br />
                        <div class="form-group ">
                            <label for="exampleInputFile">UPLOAD E-BOOK</label>
                            <input class="upload" type="file" ,accept=".pdf" , id="exampleInputFile">
                            <p class="help-block"> Formats allowed: pdf only </p>
                            @Html.ValidationMessage("eBookattachementPath", null, htmlAttributes: new { style = "color:red;" })

                            @if (!string.IsNullOrEmpty(Model.eLibraryBook.eBookattachementPath) && !string.IsNullOrEmpty(Model.eLibraryBook.eBookattachementName))
                            {
                                <div id="linkDownLoadFile">
                                    <a class="text-sm" href="@Model.eLibraryBook.eBookattachementPath" download="@Model.eLibraryBook.eBookattachementName">
                                        @Html.DisplayFor(r => Model.eLibraryBook.eBookattachementName)
                                    </a>



                                    <a href="#" onclick="deletefileConfirm()" class="fa fa-trash text-danger" title="Remove E-Book"></a>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-6">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.eLibraryBook.remark)</label>
                            @Html.TextAreaFor(m => Model.eLibraryBook.remark, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(r => Model.eLibraryBook.remark, null, htmlAttributes: new { style = "color:red;" })

                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-6">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(r => Model.eLibraryBook.isActive)
                                @Html.LabelFor(r => Model.eLibraryBook.isActive)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="box-footer">
                <button class="btn btn-warning" id="savebutton" type="button" onclick="ShowConfirmYesNo(this)">SAVE</button>
                <button class="btn btn-default" type="button" onclick="window.location.reload()">CLEAR</button>
            </div>
        </div>
    }
</section>

<script type="text/javascript">

    var files = null;
    $('.upload').on('change', function (e) {
        files = e.target.files;
    });

    function ShowConfirmYesNo(evt) {
        AsyncConfirmYesNo("Confirmation", "Are you to updated the EBook?", MyYesFunction, MyNoFunction, evt);
    }

    function MyYesFunction(evt) {
        DoAjaxPostAndMore(evt)
    }
    function MyNoFunction() {
        //alert('No Calling');
    }

    function DoAjaxPostAndMore(btnClicked) {

        var $form = $(btnClicked).parents('form');
        var data = new FormData();

        //Form data
        var form_data = $('#form1').serializeArray();
        $.each(form_data, function (key, input) {
            data.append(input.name, input.value);
        });

        //File data
        //var file_data = $('input[name="my_images"]')[0].files;
        //for (var i = 0; i < file_data.length; i++) {
        //    data.append("my_images[]", file_data[i]);
        //}
        if (files != null && files.length > 0) {
            for (var x = 0; x < files.length; x++) {
                data.append("id" + x, files[x]);
            }
        }

        $.ajax({
            type: "POST",
            beforeSend: function () {
                spinnerShow();
            },
            url: $form.attr('action'),
            processData: false,
            contentType: false,
            data: data, //$form.serialize(),
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (response) {
                if (response.status == 'success') {
                    OpenMessegeAutoHideDiv(response.Msg, response.Color);
                    setTimeout(function () { window.location.reload(); }, $('#hddnReloadTime').val());
                }
                else {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnModelStateNotValid').val());
                    AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
                    AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
                }
            },
            complete: function () {
                spinnerHide();
            }
        });
    }

    function clearForm() {
        $('#eLibraryBook_eBookName').val('');
        $('#eLibraryBook_remark').val('');
        $("#exampleInputFile").val('');

    }
</script>

<script>
    function deletefileConfirm() {
        AsyncConfirmYesNo("Confirmation", "Are you sure to permanently delete this e-Book?", deletefileConfirmed, MyNoFunction, null);
    }
    function deletefileConfirmed() {
        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../eLibrary/Delete_eBook",
            data: { bookNo: '@Model.eLibraryBook.eBookNo', oldFilePath: '@Model.eLibraryBook.eBookattachementPath' },
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (result) {
                OpenMessegeAutoHideDiv(result.Msg, result.Color);
                setTimeout(function () { window.location.reload(); }, $('#hddnReloadTime').val());
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
</script>




