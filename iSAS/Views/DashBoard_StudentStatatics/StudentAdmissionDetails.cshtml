@model ISas.Entities.DashboardEntities.StudentAdmissionDetailsMainModels

<style>
    #chartdiv_Strength {
        width: 100%;
        height: 500px;
        font-size: 11px;
    }

    #chartdiv_adm {
        width: 100%;
        height: 500px;
        font-size: 11px;
    }

    #chartdiv_Gender {
        width: 100%;
        height: 500px;
    }

    #chartdiv_CategoryDetail {
        width: 100%;
        height: 350px;
    }

    #chartdiv_Categorysummery {
        width: 100%;
        height: 350px;
    }

    .amcharts-pie-slice {
        transform: scale(1);
        transform-origin: 50% 50%;
        transition-duration: 0.3s;
        transition: all .3s ease-out;
        -webkit-transition: all .3s ease-out;
        -moz-transition: all .3s ease-out;
        -o-transition: all .3s ease-out;
        cursor: pointer;
        box-shadow: 0 0 30px 0 #000;
    }

        .amcharts-pie-slice:hover {
            transform: scale(1.1);
            filter: url(#shadow);
        }
</style>

<section class="content-header">
    <h1>Admission Details</h1>
    <ol class="breadcrumb">
        <li>
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li><a href="@Url.Action("Dashboard", "Dashboard")">Dashboard</a></li>
        <li class="active">Admission Details</li>
    </ol>
</section>

<section class="content">
    <div class="row">
        <div class="col-md-12">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h5 class="box-title">Student Strength</h5>
                </div>
                <div class="box-body">
                    <div id="chartdiv_Strength"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h5 class="box-title">Admission Details(New/Old)</h5>
                </div>
                <div class="box-body">
                    <div id="chartdiv_adm"></div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h5 class="box-title">Strength (Gender Wise)</h5>
                </div>
                <div class="box-body">
                    <div id="chartdiv_Gender"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h5 class="box-title">Category Wise(Summary)</h5>
                </div>
                <div class="box-body">
                    <div id="chartdiv_Categorysummery"></div>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h5 class="box-title">Category Wise(Details)</h5>
                </div>
                <div class="box-body">
                    <div id="chartdiv_CategoryDetail"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="box box-primary">
                <!-- /.box-header -->
                <div class="box-body">
                    <table id="example1" class="table table-bordered table-striped">
                        <thead>
                            <tr class="text-center" style="font-size:large;">
                                <td colspan="2"><strong> Total</strong></td>
                                <td><strong>@Html.DisplayFor(r => Model.Strength)</strong> </td>
                                <td><strong>@Html.DisplayFor(r => Model.NewAdm)</strong> </td>
                                <td><strong>@Html.DisplayFor(r => Model.OldAdm)</strong> </td>
                                <td><strong>@Html.DisplayFor(r => Model.TC)</strong> </td>
                                <td><strong>@Html.DisplayFor(r => Model.NSO)</strong> </td>
                                <td><strong>@Html.DisplayFor(r => Model.BOY)</strong> </td>
                                <td><strong>@Html.DisplayFor(r => Model.GIRL)</strong> </td>
                                <td><strong>@Html.DisplayFor(r => Model.GEN)</strong> </td>
                                <td><strong>@Html.DisplayFor(r => Model.SC)</strong> </td>
                                <td><strong>@Html.DisplayFor(r => Model.ST)</strong> </td>
                                <td><strong>@Html.DisplayFor(r => Model.OBC)</strong> </td>
                                <td><strong>@Html.DisplayFor(r => Model.EWS)</strong> </td>
                            </tr>
                            <tr>
                                <th>S. No</th>
                                <th>Class Name</th>
                                <th>Strength</th>
                                <th>New Adm</th>
                                <th>Old Adm</th>
                                <th>TC</th>
                                <th>Nso</th>
                                <th>Boy</th>
                                <th>Girl</th>
                                <th>General</th>
                                <th>SC</th>
                                <th>ST</th>
                                <th>OBC</th>
                                <th>EWS</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model != null && Model.StudentAdmissionDetails != null)
                            {
                                int count = 1;
                                for (int i = 0; i < Model.StudentAdmissionDetails.Count(); i++)
                                {
                                    string classSeId = @Model.StudentAdmissionDetails[i].ClassId + @Model.StudentAdmissionDetails[i].SecId;
                                    <tr class="text-center">
                                        <td>@Html.DisplayFor(r => count)</td>
                                        <td>@Html.DisplayFor(r => Model.StudentAdmissionDetails[i].FullClassName)</td>
                                        <td><a href="#" onclick="GetDashBoard_StudentStatatics_ClassList('@Model.StudentAdmissionDetails[i].FullClassName', '@classSeId', 'Strength')"> <strong><u> @Html.DisplayFor(r => Model.StudentAdmissionDetails[i].Strength)</u></strong> </a></td>
                                        <td><a href="#" onclick="GetDashBoard_StudentStatatics_ClassList('@Model.StudentAdmissionDetails[i].FullClassName', '@classSeId', 'New Adm')"> <strong><u> @Html.DisplayFor(r => Model.StudentAdmissionDetails[i].NewAdm)</u></strong> </a></td>
                                        <td><a href="#" onclick="GetDashBoard_StudentStatatics_ClassList('@Model.StudentAdmissionDetails[i].FullClassName', '@classSeId', 'Old Adm')"> <strong><u>  @Html.DisplayFor(r => Model.StudentAdmissionDetails[i].OldAdm)</u></strong> </a></td>
                                        <td><a href="#" onclick="GetDashBoard_StudentStatatics_ClassList('@Model.StudentAdmissionDetails[i].FullClassName', '@classSeId', 'TC')"> <strong> <u> @Html.DisplayFor(r => Model.StudentAdmissionDetails[i].TC)</u></strong> </a></td>
                                        <td><a href="#" onclick="GetDashBoard_StudentStatatics_ClassList('@Model.StudentAdmissionDetails[i].FullClassName', '@classSeId', 'NSO')"> <strong><u>  @Html.DisplayFor(r => Model.StudentAdmissionDetails[i].NSO)</u></strong> </a></td>
                                        <td><a href="#" onclick="GetDashBoard_StudentStatatics_ClassList('@Model.StudentAdmissionDetails[i].FullClassName', '@classSeId', 'BOY')"><strong> <u>  @Html.DisplayFor(r => Model.StudentAdmissionDetails[i].BOY)</u></strong> </a></td>
                                        <td><a href="#" onclick="GetDashBoard_StudentStatatics_ClassList('@Model.StudentAdmissionDetails[i].FullClassName', '@classSeId', 'GIRL')"><strong> <u>  @Html.DisplayFor(r => Model.StudentAdmissionDetails[i].GIRL)</u></strong> </a></td>
                                        <td><a href="#" onclick="GetDashBoard_StudentStatatics_ClassList('@Model.StudentAdmissionDetails[i].FullClassName', '@classSeId', 'GEN')"> <strong><u>  @Html.DisplayFor(r => Model.StudentAdmissionDetails[i].GEN)</u></strong> </a></td>
                                        <td><a href="#" onclick="GetDashBoard_StudentStatatics_ClassList('@Model.StudentAdmissionDetails[i].FullClassName', '@classSeId', 'SC')"> <strong> <u> @Html.DisplayFor(r => Model.StudentAdmissionDetails[i].SC)</u></strong> </a></td>
                                        <td><a href="#" onclick="GetDashBoard_StudentStatatics_ClassList('@Model.StudentAdmissionDetails[i].FullClassName', '@classSeId', 'ST')"><strong> <u>  @Html.DisplayFor(r => Model.StudentAdmissionDetails[i].ST)</u></strong> </a></td>
                                        <td><a href="#" onclick="GetDashBoard_StudentStatatics_ClassList('@Model.StudentAdmissionDetails[i].FullClassName', '@classSeId', 'OBC')"><strong> <u>  @Html.DisplayFor(r => Model.StudentAdmissionDetails[i].OBC)</u></strong> </a></td>
                                        <td><a href="#" onclick="GetDashBoard_StudentStatatics_ClassList('@Model.StudentAdmissionDetails[i].FullClassName', '@classSeId', 'EWS')"><strong> <u>  @Html.DisplayFor(r => Model.StudentAdmissionDetails[i].EWS)</u></strong> </a></td>
                                    </tr>
                                    count++;
                                }

                            }
                        </tbody>

                    </table>
                </div>
                <!-- /.box-body -->
            </div>
        </div>
    </div>
</section>



<script src="~/bower_components/newchart.js/amcharts.js"></script>
<script src="~/bower_components/newchart.js/export.min.js"></script>
<script src="~/bower_components/newchart.js/light.js"></script>
<script src="~/bower_components/newchart.js/pie.js"></script>
<script src="~/bower_components/newchart.js/serial.js"></script>
<link href="~/bower_components/newchart.css/export.css" rel="stylesheet" />


<script>
    $(function () {
        $.ajax({
            type: "GET",
            url: "../DashBoard_StudentStatatics/StudentAdmissionDetails_Charts",
            data: {},
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (result) {
                strengthChart(result.strengthChartData);
                newOrOldAdmChart(result.newOrOldAdmChartData);
                genderWiseChart(result.genderWiseChartData);
                categoryWiseSummaryChart(result.categoryWiseSummaryChartData)
                categoryWiseDetailChart(result.categoryWiseDetailChartData);
            },
        })
    });

    function strengthChart(data) {
        var chart = AmCharts.makeChart("chartdiv_Strength", {
            "type": "pie",
            "startDuration": 0,
            "theme": "light",
            "addClassNames": true,
            "legend": {
                "position": "right",
                "marginRight": 100,
                "autoMargins": false
            },
            "innerRadius": "30%",
            "defs": {
                "filter": [{
                    "id": "shadow",
                    "width": "200%",
                    "height": "200%",
                    "feOffset": {
                        "result": "offOut",
                        "in": "SourceAlpha",
                        "dx": 0,
                        "dy": 0
                    },
                    "feGaussianBlur": {
                        "result": "blurOut",
                        "in": "offOut",
                        "stdDeviation": 5
                    },
                    "feBlend": {
                        "in": "SourceGraphic",
                        "in2": "blurOut",
                        "mode": "normal"
                    }
                }]
            },
            "dataProvider": data,
            "valueField": "strength",
            "titleField": "className",
            "export": {
                "enabled": true
            }
        });
        chart.addListener("init", handleInit);
        chart.addListener("rollOverSlice", function (e) {
            handleRollOver(e);
        });
        function handleInit() {
            chart.legend.addListener("rollOverItem", handleRollOver);
        }
        function handleRollOver(e) {
            var wedge = e.dataItem.wedge.node;
            wedge.parentNode.appendChild(wedge);
        }
    }
    function newOrOldAdmChart(data) {
        var chart_adm = AmCharts.makeChart("chartdiv_adm", {
            "type": "serial",
            "theme": "light",
            "categoryField": "className",
            "rotate": true,
            "startDuration": 1,
            "categoryAxis": {
                "gridPosition": "start",
                "position": "left"
            },
            "trendLines": [],
            "graphs": [
                {
                    "balloonText": "New Admission:[[value]]",
                    "fillAlphas": 0.8,
                    "id": "AmGraph-1",
                    "lineAlpha": 0.2,
                    "title": "New Admission",
                    "type": "column",
                    "valueField": "newAdm"
                },
                {
                    "balloonText": "Old Admission:[[value]]",
                    "fillAlphas": 0.8,
                    "id": "AmGraph-2",
                    "lineAlpha": 0.2,
                    "title": "Old Admission",
                    "type": "column",
                    "valueField": "oldAdm"
                }
            ],
            "guides": [],
            "valueAxes": [
                {
                    "id": "ValueAxis-1",
                    "position": "top",
                    "axisAlpha": 0
                }
            ],
            "allLabels": [],
            "balloon": {},
            "titles": [],
            "dataProvider": data,
            "export": {
                "enabled": true
            }

        });
    }
    function genderWiseChart(data) {
        var chartdiv_Gender = AmCharts.makeChart("chartdiv_Gender", {
            "type": "serial",
            "theme": "light",
            "rotate": true,
            "marginBottom": 50,
            "dataProvider": data,
            "startDuration": 1,
            "graphs": [{
                "fillAlphas": 0.8,
                "lineAlpha": 0.2,
                "type": "column",
                "valueField": "male",
                "title": "Male",
                "labelText": "[[value]]",
                "clustered": false,
                "labelFunction": function (item) {
                    return Math.abs(item.values.value);
                },
                "balloonFunction": function (item) {
                    return item.category + ": " + Math.abs(item.values.value);
                }
            }, {
                "fillAlphas": 0.8,
                "lineAlpha": 0.2,
                "type": "column",
                "valueField": "female",
                "title": "Female",
                "labelText": "[[value]]",
                "clustered": false,
                "labelFunction": function (item) {
                    return Math.abs(item.values.value);
                },
                "balloonFunction": function (item) {
                    return item.category + ": " + Math.abs(item.values.value);
                }
            }],
            "categoryField": "className",
            "categoryAxis": {
                "gridPosition": "start",
                "gridAlpha": 0.2,
                "axisAlpha": 0
            },
            "valueAxes": [{
                "gridAlpha": 0,
                "ignoreAxisWidth": true,
                "labelFunction": function (value) {
                    return Math.abs(value) + '';
                },
                "guides": [{
                    "value": 0,
                    "lineAlpha": 0.2
                }]
            }],
            "balloon": {
                "fixedPosition": true
            },
            "chartCursor": {
                "valueBalloonsEnabled": false,
                "cursorAlpha": 0.05,
                "fullWidth": true
            },
            "allLabels": [{
                "text": "BOY",
                "x": "28%",
                "y": "97%",
                "bold": true,
                "align": "middle"
            }, {
                "text": "GIRL",
                "x": "75%",
                "y": "97%",
                "bold": true,
                "align": "middle"
            }],
            "export": {
                "enabled": true
            }

        });
    }
    function categoryWiseSummaryChart(data) {
        var chartdiv_Categorysummery = AmCharts.makeChart("chartdiv_Categorysummery", {
            "theme": "light",
            "type": "serial",
            "startDuration": 2,
            "dataProvider": data,
            "valueAxes": [{
                "position": "left",
                "axisAlpha": 0,
                "gridAlpha": 0
            }],
            "graphs": [{
                "balloonText": "[[category]]: <b>[[value]]</b>",
                "colorField": "color",
                "fillAlphas": 0.85,
                "lineAlpha": 0.1,
                "type": "column",
                "topRadius": 1,
                "valueField": "strength"
            }],
            "depth3D": 40,
            "angle": 30,
            "chartCursor": {
                "categoryBalloonEnabled": false,
                "cursorAlpha": 0,
                "zoomable": false
            },
            "categoryField": "categoryName",
            "categoryAxis": {
                "gridPosition": "start",
                "axisAlpha": 0,
                "gridAlpha": 0
            },
            "export": {
                "enabled": true
            }

        }, 0);
    }
    function categoryWiseDetailChart(data) {
        var chartdiv_CategoryDetail = AmCharts.makeChart("chartdiv_CategoryDetail", {
            "type": "serial",
            "theme": "light",
            "legend": {
                "horizontalGap": 10,
                "maxColumns": 1,
                "position": "right",
                "useGraphSettings": true,
                "markerSize": 10
            },
            "dataProvider": data,
            "valueAxes": [{
                "stackType": "regular",
                "axisAlpha": 0.5,
                "gridAlpha": 0
            }],
            "graphs": [{
                "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
                "fillAlphas": 0.8,
                "labelText": "[[value]]",
                "lineAlpha": 0.3,
                "title": "GENERAL",
                "type": "column",
                "color": "#000000",
                "valueField": "gen"
            }, {
                "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
                "fillAlphas": 0.8,
                "labelText": "[[value]]",
                "lineAlpha": 0.3,
                "title": "SC",
                "type": "column",
                "color": "#000000",
                "valueField": "sc"
            }, {
                "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
                "fillAlphas": 0.8,
                "labelText": "[[value]]",
                "lineAlpha": 0.3,
                "title": "ST",
                "type": "column",
                "color": "#000000",
                "valueField": "st"
            }, {
                "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
                "fillAlphas": 0.8,
                "labelText": "[[value]]",
                "lineAlpha": 0.3,
                "title": "OBC",
                "type": "column",
                "color": "#000000",
                "valueField": "obc"
            }, {
                "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
                "fillAlphas": 0.8,
                "labelText": "[[value]]",
                "lineAlpha": 0.3,
                "title": "EWS",
                "type": "column",
                "color": "#000000",
                "valueField": "ews"
            }],
            "rotate": true,
            "categoryField": "className",
            "categoryAxis": {
                "gridPosition": "start",
                "axisAlpha": 0,
                "gridAlpha": 0,
                "position": "left"
            },
            "export": {
                "enabled": true
            }
        });
    }

    $(function () {
        $('#example1').DataTable({
            "pageLength": 25
        });
    });

    function GetDashBoard_StudentStatatics_ClassList(ClassName, ClassSectionId, StaticMode) {
        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: '../DashBoard_StudentStatatics/_StudentAdmissionDetails',
            data: { ClassSectionId: ClassSectionId, StaticMode: StaticMode, ClassName: ClassName },
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (response) {
                OpenMessegeModal(response, 'Primary', 'lg', ClassName + '  :- ' + StaticMode);
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
</script>