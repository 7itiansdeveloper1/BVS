@model  ISas.Entities.StaffEntities.Staff_DocumentUploadModels
@{
    int count = 1;

    List<SelectListItem> trainbyList = new List<SelectListItem>();
    trainbyList.Add(new SelectListItem { Text = "CBSE", Value = "CBSE", Selected = true });
    trainbyList.Add(new SelectListItem { Text = "OTHER", Value = "OTHER" });

    string reportName = "Document Upload Report";
}
<script src="~/bower_components/datatables.net/js/dataTables.buttons.min.js"></script>
<script src="~/bower_components/datatables.net/js/buttons.flash.min.js"></script>
<script src="~/bower_components/datatables.net/js/jszip.min.js"></script>
<script src="~/bower_components/datatables.net/js/buttons.print.min.js"></script>
<script src="~/bower_components/datatables.net/js/pdfmake.min.js"></script>
<script src="~/bower_components/datatables.net/js/vfs_fonts.js"></script>
<script src="~/bower_components/datatables.net/js/buttons.html5.min.js"></script>
<script src="~/bower_components/datatables.net/js/buttons.colVis.min.js"></script>
<script src="~/bower_components/datatables.net/js/dataTables.select.min.js"></script>
<link rel="stylesheet" href="~/bower_components/datatables.net/css/buttons.dataTables.min.css">
<section class="content-header">
    <h1>Staff <small>(UPDATE)</small> </h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li class="active">Staff Update</li>
    </ol>
</section>
<section class="content">
    <div class="box box-warning">

        <div class="box-body">
            <div class="row">
                <div class="col-xs-12 col-sm-6 col-md-2">
                    <div class="form-group">
                        <label for="">@Html.Label("Document Name")<i class="mandateLbl">*</i></label>
                        <div class="select">
                            @Html.DropDownListFor(m => m.DocId, new SelectList(Model.documentList, "Value", "Text"), "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                            @Html.ValidationMessageFor(m => m.DocId, null, htmlAttributes: new { style = "color:red;" })
                        </div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-md-2">
                    <div class="form-group">
                        <label for="">@Html.LabelFor(m => m.docAlias)<i class="mandateLbl">*</i></label>
                        <div class="select">
                            @Html.TextBoxFor(m => m.docAlias, null, htmlAttributes: new { @class = "form-control", placeholder = "Enter Alias" })
                            @Html.ValidationMessageFor(m => m.docAlias, null, htmlAttributes: new { style = "color:red;" })
                        </div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-md-2">
                    <div class="form-group">
                        <label for="exampleInputFile">@Html.Label("Attach Document ")<i class="mandateLbl">*</i></label>
                        <input class="upload" type="file" id="exampleInputFile">
                        <p class="help-block"> Formats allowed: pdf,image file</p>
                    </div>
                </div>

                <div class="col-xs-12 col-sm-6 col-md-2">
                    <div class="form-group">
                        <label for="">@Html.LabelFor(r => Model.certificateDate)<i class="mandateLbl">*</i></label>
                        <div class="input-group date">
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                            @Html.TextBoxFor(m => m.certificateDate, htmlAttributes: new { @class = "form-control pull-right date" })
                            @Html.ValidationMessageFor(r => Model.certificateDate, null, htmlAttributes: new { style = "color:red;" })
                        </div>
                        <!-- /.input group -->
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-md-2">
                    <div class="form-group">
                        <label for="">@Html.LabelFor(m => m.TrainBy)</label>
                        <div class="select">
                            @Html.DropDownListFor(m => m.TrainBy, new SelectList(trainbyList, "Value", "Text"), "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                            @Html.ValidationMessageFor(m => m.DocId, null, htmlAttributes: new { style = "color:red;" })
                        </div>
                    </div>
                </div>

                <div class="col-xs-12 col-sm-6 col-md-2">
                    <div class="form-group">
                        <button style="margin-top:30px;" class="btn btn-success" id="Button1" type="button" onclick="uploadAttachment(this)">ADD</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="box-body pad table-responsive">
            <div>
                <table cellspacing="0" cellpadding="0" border="0" class="table table-bordered " id="documentUploadTable">
                    <thead>
                        <tr>
                            <th>Sno</th>
                            <th>DocumentName</th>
                            <th>Document Path</th>
                            <th>Document Alias</th>
                            <th>Certificate Date</th>
                            <th>Trained By</th>
                            <th>Uploaded By</th>
                            <th>Upload Date</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.staffDocumentList != null)
                        {
                            for (int i = 0; i < Model.staffDocumentList.Count; i++)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(r => @count)
                                        @Html.HiddenFor(r => Model.staffDocumentList[i].docNo)
                                    </td>
                                    <td>@Html.DisplayFor(r => Model.staffDocumentList[i].DocName) </td>
                                    <td><a class="text-sm" href="@Model.staffDocumentList[i].DocPath" download="@Model.staffDocumentList[i].docfileName"> @Html.DisplayFor(r => Model.staffDocumentList[i].docfileName)</a></td>
                                    <td>@Html.DisplayFor(r => Model.staffDocumentList[i].docAlias)</td>
                                    <td>@Html.DisplayFor(r => Model.staffDocumentList[i].certificateDate)</td>
                                    <td>@Html.DisplayFor(r => Model.staffDocumentList[i].TrainByName)</td>
                                    <td>@Html.DisplayFor(r => Model.staffDocumentList[i].UploadedBy)</td>
                                    <td>@Html.DisplayFor(r => Model.staffDocumentList[i].UplodedDate)</td>
                                    <td class="text-left">
                                        <a href="#" onclick="deletefileConfirm('@Model.staffDocumentList[i].docNo')" class="fa fa-trash text-danger" title="Remove Attachment"></a>
                                    </td>
                                </tr>
                                count++;
                            }
                        }
                    </tbody>
                </table>

            </div>
            
        </div>
    </div>

</section>


<script>
     $(document).ready(function () {
       $('#documentUploadTable').DataTable({
            "pageLength": 10,
            dom: 'Bfrtip',
            buttons: [
                {
                    extend: 'copyHtml5',
                    text: '<i class="fa fa-files-o"></i>',
                    titleAttr: 'Copy',
                    title: '@reportName',
                    exportOptions: {
                        columns: ':visible'
                    }
                },
                {
                    extend: 'excelHtml5',
                    text: '<i class="fa fa-file-excel-o"></i>',
                    titleAttr: 'Excel',
                    title: '@reportName',
                    exportOptions: {
                        columns: ':visible'
                    },
                    customize: function (xlsx) {
                        console.log(xlsx);

                    }
                },
                {
                    extend: 'print',
                    text: '<i class="fa fa-print"></i>',
                    titleAttr: 'Print',
                    title: "",
                    exportOptions: {
                        columns: ':visible'
                    },
                    customize: function (win) {
                        $(win.document.body)
                            //.css('font-size', '10pt')
                            .prepend($('#reportHeaderDiv').html()); //'<img src="http://localhost:60254/Images/System/balVikasLog.jpg" style="" />'
                        $(win.document.body).find('table')
                            .addClass('compact')
                            .css('font-size', 'inherit');
                    }
                },
                'colvis'
            ],
            select: true
        });
    });


</script>

<script>

    var files = null;
    $('.upload').on('change', function (e) {
        files = e.target.files;
    });



    function uploadAttachment() {
        var $docId = $("#DocId").val();
        var $staffId='@Model.staffId'
        var $docAlias = $("#docAlias").val();
        var $certificateDate = $("#certificateDate").val();
        var $TrainBy = $("#TrainBy").val();

        if ($docId == null || $docId == "") {
            OpenMessegeAutoHideDiv("Document name is required...!", 'Info');
            return;
        }

        if ($docAlias == null || $docAlias == "") {
            OpenMessegeAutoHideDiv("Alias name is required...!", 'Info');
            return;
        }
        if ($certificateDate == null || $certificateDate == "") {
            OpenMessegeAutoHideDiv("Certificate date is required...!", 'Info');
            return;
        }

        if (files != null && files.length > 0) {
            if (window.FormData !== undefined) {
                var data = new FormData();
                for (var x = 0; x < files.length; x++) {
                    data.append("id" + x, files[x]);
                }
                data.append('staffId', $staffId);
                data.append('docId', $docId);
                data.append('docAlias', $docAlias);
                data.append('certificationDate', $certificateDate);
                data.append('trainedby', $TrainBy);

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("UploadStaffDocumentFile", "Staff_DocumentUpload")',
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        OpenMessegeAutoHideDiv(result.Msg, result.Color);
                        console.log(result.status);
                        if (result.status == "success") {
                            location.reload();
                        }

                    },

                    error: function (xhr, status, p3, p4) {
                        OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
                    }
                });
            } else {
                OpenMessegeAutoHideDiv("This browser doesn't support HTML5 file uploads!", 'Info');
            }
        }
        else {
            OpenMessegeAutoHideDiv("Please include attachment!", 'Info');
        }
    }
    function deletefileConfirm(docNo) {
        AsyncConfirmYesNo("Confirmation", "Are you sure to remove attachment?", MyYesFunction1, MyNoFunction1, docNo);
    }

    function MyYesFunction1(docNo) {

        var $docNo = docNo;
        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../Staff_DocumentUpload/Certificate_DELETE",
            data: { docno: $docNo},
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (result) {
                OpenMessegeAutoHideDiv(result.Msg, result.Color);
                if (result.status == "success") {
                    location.reload();
                }
                //location.reload();
                //reloadAttachment();
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
    function MyNoFunction1() {
    }
</script>