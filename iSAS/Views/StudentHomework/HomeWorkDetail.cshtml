@model ISas.Entities.DashboardEntities.homework
<script src="~/bower_components/ckeditor/ckeditor.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ajax-unobtrusive/3.2.6/jquery.unobtrusive-ajax.min.js"></script>

<section class="content-header">
    <h1>
        My Activity
    </h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li><a href="@Url.Action("Homework", "StudentHomework")">My Activity Portfolio</a></li>
        <li class="active">Activity Details</li>
    </ol>
</section>
<section class="content">

    @using (Ajax.BeginForm("Student_HomeWorkMaster_CRUD", "StudentHomeWork", new AjaxOptions { OnSuccess = "Showsuccess", HttpMethod = "POST" }, htmlAttributes: new { enctype = "multipart/form-data" }))
    {
        @Html.HiddenFor(r => r.homeWorkId)
        @Html.HiddenFor(r => Model.AttachFiles)
        <div class="box box-primary">
            <div class="box-body">
                <div class="span">

                </div>
                <div class="row">
                    <div class="col-md-12 col-xs-12 col-sm-12">
                        <ul class="list-group list-group-unbordered ">
                            <li class="list-group-item">
                                <b>Title:</b> @Html.DisplayFor(r => Model.homeWorkTitle) |
                                <b>Subject :</b> @Html.DisplayFor(r => Model.subject)|
                                <b>Date :</b> @Html.DisplayFor(r => Model.homeWorkDate) |
                                <b>Submission Date :</b> @Html.DisplayFor(r => Model.submissionDate) |
                                <b>Refered By:</b> @Html.DisplayFor(r => Model.referedBy)


                            </li>
                            <li class="list-group-item">
                                <b>Activity Attachments :</b>
                                @if (!string.IsNullOrEmpty(Model.attachments))
                                {
                                    List<string> attachments = Model.attachments.Split(',').ToList();

                                    for (int j = 0; j < attachments.Count; j++)
                                    {
                                        string commaStr = "";
                                        if (j > 0)
                                        {
                                            commaStr = ", ";
                                        }
                                        @Html.DisplayFor(r => commaStr)
                                        <i class="fa fa-paperclip" title="Click here to download attachment">
                                            <a class="text-sm" href="~/@attachments[j]" download="@attachments[j].Substring(@attachments[j].LastIndexOf('@') + 1)">@attachments[j].Substring(@attachments[j].LastIndexOf('@') + 1)</a>
                                        </i>

                                    }


                                }

                            </li>
                            <li class="list-group-item">
                                <b>Status:</b>

                                @if (Model.status == "Not submitted")
                                {
                                    <a style="background-color:red;color:white">@Html.DisplayFor(r => Model.status)</a>
                                }
                                else
                                {
                                    <a style="background-color:green;color:white">@Html.DisplayFor(r => Model.status)</a>
                                }


                            </li>
                            <li class="list-group-item">
                                <b>Is Reviewed  :</b> @Html.DisplayFor(r => Model.isReviewed)
                            </li>
                            <li class="list-group-item">
                                <b>Feedback Attachments :</b>
                                @if (!string.IsNullOrEmpty(Model.FeedbackattachmentsFilePath))
                                {
                                    List<string> attachments = Model.FeedbackattachmentsFilePath.Split(',').ToList();

                                    for (int j = 0; j < attachments.Count; j++)
                                    {
                                        string commaStr = "";
                                        if (j > 0)
                                        {
                                            commaStr = ", ";
                                        }
                                        @Html.DisplayFor(r => commaStr)
                                        <i class="fa fa-paperclip" title="Click here to download attachment">
                                            <a class="text-sm" href="~/@attachments[j]" download="@attachments[j].Substring(@attachments[j].LastIndexOf('@') + 1)">@attachments[j].Substring(@attachments[j].LastIndexOf('@') + 1)</a>
                                        </i>

                                    }


                                }
                                else
                                {
                                    <b>No Attachment</b>
                                }

                            </li>

                        </ul>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        <div class="form-group">
                            <label for="">Teacher Remark</label>
                            <div class="select">
                                @Html.TextAreaFor(m => m.remark, htmlAttributes: new { @class = "form-control", @readonly = true })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-12 col-xs-12 col-sm-12">
                        <ul class="list-group list-group-unbordered"></ul>
                    </div>


                </div>
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        <br /> <br />
                               <div class="form-group ">
                                   <input multiple type="file" id="files" name="files" accept="text/plain, .docx,.xlsx, .pdf,.pptx" onchange="checkfile()" />
                                   <i style="color:red">You can upload multiple file (e.g. pdf,excel,word,ppt,notepad only having max. size 2 MB.).</i>

                               </div>


                        @if (!string.IsNullOrEmpty(Model.AttachFiles))
                        {
                            List<string> attachments = Model.AttachFiles.Split(',').ToList();

                            for (int j = 0; j < attachments.Count; j++)
                            {
                                string commaStr = "";
                                if (j > 0)
                                {
                                    commaStr = ", ";
                                }
                                @Html.DisplayFor(r => commaStr)
                                <i class="fa fa-paperclip" title="Click here to download attachment">
                                    <a class="text-sm" href="~/@attachments[j]" download="@attachments[j].Substring(@attachments[j].LastIndexOf('@') + 1)">@attachments[j].Substring(@attachments[j].LastIndexOf('@') + 1)</a>
                                    @if (Model.status == "Not submitted")
                                    {
                                        <a href="#" onclick="DeleteAttachmentConfirm('@attachments[j]')" class="fa fa-trash text-danger" title="Remove Attachment"></a>
                                    }
                                </i>

                            }


                        }

                    </div>
                </div>
                <div class="row">
                    @*<div class="col-xs-12 col-sm-12 col-md-12">
                <div class="form-group">
                    <label for="">Description</label>
                    <div class="select">
                        @Html.TextAreaFor(m => m.ansDescription, htmlAttributes: new { @class = "form-control ckeditor" })
                    </div>
                </div>
            </div>*@
                    <div class="col-xs-12 col-sm-12 col-md-3">
                        <div class="form-group">
                            <label for="">Video link 1</label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.VedioLink1, htmlAttributes: new { @class = "form-control", autocomplete = "off" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-md-3">
                        <div class="form-group">
                            <label for="">Video link 2</label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.VedioLink2, htmlAttributes: new { @class = "form-control", autocomplete = "off" })
                            </div>
                        </div>
                    </div>

                </div>

            </div>

            <div class="box-footer">

                @if (Model.status == "Not submitted")
                {
                    <button class="btn btn-success" id="savebutton" type="submit">SAVE & SUBMIT</button>
                    @*<button class="btn btn-warning pull-right" type="button" onclick="SubmitConfirm()">SUBMIT</button>*@
                }
                else
                {
                    <button class="btn btn-success" id="savebutton" disabled="disabled">SAVE</button>
                    @*<button class="btn btn-default" type="button" disabled="disabled">SUBMIT</button>*@
                }

            </div>

        </div>
    }
</section>
<script>

    //function DoAjaxPostAndMore(btnClicked) {

    //    //$($form).submit(function (e) {
    //    //    e.preventDefault(); // stop the standard form submission
    //    //    $.ajax({
    //    //        url: this.action,
    //    //        type: this.method,
    //    //        data: new FormData(this),
    //    //        cache: false,
    //    //        contentType: false,
    //    //        processData: false,
    //    //        success: function (data) {
    //    //            console.log(data.UploadedFileCount + ' file(s) uploaded successfully');
    //    //        },
    //    //        error: function (xhr, error, status) {
    //    //            console.log(error, status);
    //    //        }
    //    //    });
    //    //});

    //    var $form = $(btnClicked).parents('form');
    //    var $form1=$('#upload')
    //    console.log($form.attr('action'));
    //    $.ajax({
    //        type: "POST",
    //        beforeSend: function () {
    //            spinnerShow();
    //        },
    //        url: $form.attr('action'),
    //        contentType: false,
    //        //data: $form.serialize(),
    //        data: new FormData($form),
    //        error: function (xhr, status, error) {
    //            OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
    //        },
    //        success: function (response) {

    //            if (response.status == 'success') {
    //                OpenMessegeAutoHideDiv(response.Msg, response.Color);

    //            } else {
    //                OpenMessegeAutoHideDiv($('#ErrorMsgOnModelStateNotValid').val());
    //                AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
    //                AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
    //            }
    //        },
    //        complete: function () {
    //            spinnerHide();
    //        }
    //    });
    //}
    function SubmitConfirm() {
        AsyncConfirmYesNo("Confirmation", "Are you sure to submit the homework?", MyYesFunction1, MyNoFunction1);
    }

    function DeleteAttachmentConfirm(AttachmentRef) {
        AsyncConfirmYesNo("Confirmation", "Are you sure to permanently delete this Attachment?", MyYesFunction, MyNoFunction, AttachmentRef);
    }
    function MyYesFunction1() {
        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../StudentHomeWork/Student_HomeWorkMaster_SUBMIT",
            data: { HomeWorkId : '@Model.homeWorkId'},
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (response) {
                if (response.status == 'success') {
                    OpenMessegeAutoHideDiv(response.Msg, response.Color);
                }
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
    function MyYesFunction(AttachmentRef) {
        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../StudentHomeWork/Student_HomeWorkMaster_RemoveAttachment",
            data: { HomeWorkId : '@Model.homeWorkId', ToBeRemovedAttach: AttachmentRef, AllAttachments : '@Model.AttachFiles' },
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (response) {
                if (response.status == 'success') {
                    OpenMessegeAutoHideDiv(response.Msg, response.Color);
                    setTimeout(function () { window.location.reload();}, $('#hddnReloadTime').val());
                    //window.location.reload();
                }
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
    function MyNoFunction() {
    }
    function MyNoFunction1() {
    }

    var Showsuccess = function (response) {
        OpenMessegeAutoHideDiv(response.Msg, response.Color);
    };



    function checkfile() {
            var files = $('#files')[0].files;
            for (var i = 0; i < files.length; i++) {
                var ext=files[i].name.split('.').pop().toLowerCase();
                if ( (ext == 'txt' || ext == 'docx' || ext == 'doc' || ext == 'pdf' || ext == 'xlsx' || ext == 'xls'||ext == 'pptx'||ext == 'ppt') && files[i].size < 2097152) {
                }
                else {
                    OpenMessegeAutoHideDiv("Invalid file selected...! ", "warning");
                    $('#files').val('');
                    return false;
                }
            }
    }


</script>