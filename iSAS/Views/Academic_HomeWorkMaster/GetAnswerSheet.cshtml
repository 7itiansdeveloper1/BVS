@using ISas.Web.Models;
@model ISas.Entities.Academic.answerSheet

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ajax-unobtrusive/3.2.6/jquery.unobtrusive-ajax.min.js"></script>
<style>
    .flex-container {
        display: flex;      
    }
        .flex-container > div {           
            margin: 10px;
            padding: 20px;           
        }
</style>
<section class="content-header">
    <h1>Answersheet</h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li>Academic</li>
        <li>Activity Portfolio</li>
        <li>Student Response</li>
        <li class="active">Answersheet</li>
    </ol>
</section>

<section class="content">
    @*@using (Html.BeginForm("Teacher_AnswerSheet_CRUD", "Academic_HomeWorkMaster", FormMethod.Post, htmlAttributes: new { enctype = "multipart/form-data" }))*@
    @using (Ajax.BeginForm("Teacher_AnswerSheet_CRUD", "Academic_HomeWorkMaster", new AjaxOptions { OnSuccess = "Showsuccess", HttpMethod = "POST" }, htmlAttributes: new { enctype = "multipart/form-data" }))

    {
        @Html.HiddenFor(r => Model.HomeWorkId)
        @Html.HiddenFor(r => Model.ERP)
        <div class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">@Model.Student | @Model.homeworkname </h3>
                @*<h4 class="text-primary"> </h4>*@
            </div>
            <div class="box-body">
                <div class="row">
                    <div class="col-md-12 col-xs-12 col-sm-12">
                        <ul class="list-group list-group-unbordered">
                            <li class="list-group-item">
                                <b style="font-size:medium">Attachments :</b>
                                @if (!string.IsNullOrEmpty(Model.AttachFiles))
                                {
                                    List<string> attachments = Model.AttachFiles.Split(',').ToList();

                                    for (int j = 0; j < attachments.Count; j++)
                                    {
                                        string commaStr = "";
                                        if (j > 0)
                                        {
                                            commaStr = ", ";
                                        }
                                        @Html.DisplayFor(r => commaStr)
                                        <i class="fa fa-paperclip" title="Click here to download attachment">
                                            <a class="text-sm" style="font-size:medium" href="~/@attachments[j]" download="@attachments[j].Substring(@attachments[j].LastIndexOf('@') + 1)">@attachments[j].Substring(@attachments[j].LastIndexOf('@') + 1)</a>
                                        </i>

                                    }


                                }

                                @*|<b>Status:</b>

                                    <b>Is Reviewed? :</b> @Html.DisplayFor(r => Model.isReviewed)*@


                            </li>
                            <li class="list-group-item">
                                <b style="font-size:medium">Feedback attachments :</b>
                                @if (!string.IsNullOrEmpty(Model.RevertAttachFilesPath))
                                {
                                    List<string> attachments = Model.RevertAttachFilesPath.Split(',').ToList();

                                    for (int j = 0; j < attachments.Count; j++)
                                    {
                                        string commaStr = "";
                                        if (j > 0)
                                        {
                                            commaStr = ", ";
                                        }
                                        @Html.DisplayFor(r => commaStr)
                                        <i class="fa fa-paperclip" title="Click here to download attachment">
                                            <a class="text-sm" style="font-size:medium" href="~/@attachments[j]" download="@attachments[j].Substring(@attachments[j].LastIndexOf('@') + 1)">@attachments[j].Substring(@attachments[j].LastIndexOf('@') + 1)</a>
                                        </i>

                                    }


                                }

                                @*|<b>Status:</b>

                                    <b>Is Reviewed? :</b> @Html.DisplayFor(r => Model.isReviewed)*@


                            </li>
                        </ul>
                        <ul class="list-group list-group-unbordered"></ul>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6 col-xs-12 col-sm-12">
                        <div class="form-group ">
                            <input multiple type="file" id="files" name="files" accept="text/plain, .docx,.xlsx, .pdf,.pptx" onchange="checkfile()"/>
                            <i style="color:red">You can upload multiple file (e.g. pdf,excel,word,ppt,notepad only having max. size 2 MB.).</i>
                            <i style="color:red">File name should be one word only.</i>
                        </div>
                        <br /> <br />
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Remark)</label>
                            <div class="select">
                                @Html.TextAreaFor(m => m.Remark, htmlAttributes: new { @class = "form-control", autocomplete = "off" })
                                @Html.ValidationMessageFor(r => Model.Remark, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6 col-xs-12 col-sm-12" style="align-items:center">

                        <div>
                            <b>Video 1</b>
                            <br>
                            <div id="player">
                                <h4>Video 1 Not Uploaded</h4>
                            </div>
                        </div>

                        <b>Video 2</b>
                        <br>
                        <div id="player1">
                            <h4>Video 2 Not Uploaded</h4>
                        </div>

                        @*<div class="row">
                                <b>Video 1</b>
                                <br>
                                <div id="player">
                                    <h4>Video 1 Not Uploaded</h4>
                                </div>
                            </div>*@

                        @*<div class="row">
                                <b>Video 2</b>
                                <br>
                                <div id="player1">
                                    <h4>Video 2 Not Uploaded</h4>
                                </div>
                            </div>*@

                    </div>

                </div>
            </div>
            <div class="box-footer">
                <div class="flex-container">
                    <div>
                        <button class="btn btn-success" id="savebutton" type="submit">SAVE</button>
                    </div>

                    @if (Model.isReviewed)
                    {
                        <div>
                            <label class="switch">
                                <input id="swtisReviewed" type="checkbox" checked="checked" onchange="ConfirmToUpdateStatus()">
                                <span class="slider round" title="Unmark as Viewed"> </span>
                            </label>
                        </div>
                        <div>
                            <lable>Viewed</lable>
                        </div>
                    }
                    else
                    {
                        <div>
                            <label class="switch">
                                <input id="swtisReviewed" type="checkbox" onchange="ConfirmToUpdateStatus()">
                                <span class="slider round" title="Mark as Viewed"></span>
                            </label>
                        </div>
                        <div>
                            <lable>Viewed</lable>
                        </div>
                    }

                    @if (Model.isSubmited)
                    {
                        <div>
                            <label class="switch">
                                <input id="swtichSubmit" type="checkbox" checked="checked" onchange="UpdateSubmitStatus()">
                                <span class="slider round" title="Mark as not submitted"> </span>
                            </label>
                        </div>
                        <div>
                            <lable>Edit</lable>
                        </div>
                    }
                    else
                    {
                        <div>
                            <label class="switch">
                                <input id="swtichSubmit" type="checkbox" onchange="UpdateSubmitStatus()">
                                <span class="slider round" title="Edit"></span>
                            </label>
                        </div>
                        <div>
                            <lable>Edit</lable>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</section>


<script>
    function checkfile() {
            var files = $('#files')[0].files;
            for (var i = 0; i < files.length; i++) {
                var ext=files[i].name.split('.').pop().toLowerCase();
                if ( (ext == 'txt' || ext == 'docx' || ext == 'doc' || ext == 'pdf' || ext == 'xlsx' || ext == 'xls'||ext == 'pptx'||ext == 'ppt') && files[i].size < 2097152) {
                }
                else {
                    OpenMessegeAutoHideDiv("Invalid file selected...! ", "warning");
                    $('#files').val('');
                    return false;
                }
            }
    }

    var Showsuccess = function (response) {
        OpenMessegeAutoHideDiv(response.Msg, response.Color);
    };

        // 2. This code loads the IFrame Player API code asynchronously.
        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        var player;
        var player1;

        var url = '@Model.VedioLink1';
        var url1 = '@Model.VedioLink2';

        var videoid = youtube_parser(url);
        var videoid1 = youtube_parser(url1);
        //console.log(videoid1);
        function youtube_parser(url) {
            var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;
            var match = url.match(regExp);
            var finalurl = (match && match[7].length == 11) ? match[7] : false;
            //console.log(finalurl);
            return finalurl;
        }

        function onYouTubeIframeAPIReady() {
            if (videoid != false) {
                player = new YT.Player('player', {
                    height: '290',
                    width: '320',
                    videoId: videoid,
                    playerVars: {
                        'playsinline': 1
                    },
                    events: {
                        'onReady': onPlayerReady,
                        'onStateChange': onPlayerStateChange
                    }
                });
            }

            if (videoid1 != false)
            {
                player1 = new YT.Player('player1', {
                    height: '390',
                    width: '520',
                    videoId: videoid1,
                    playerVars: {
                        'playsinline': 0
                    },
                    events: {
                        'onReady': onPlayerReady,
                        'onStateChange': onPlayerStateChange
                    }
                });
            }
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
                event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
     var done = false;

      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
                setTimeout(stopVideo, 0000);
                done = true;
        }
      }
      function stopVideo() {
                player.stopVideo();
        }


    
        function ConfirmToUpdateStatus() {
            var activeStatus = false;
            if ($('#swtisReviewed').is(':checked')) {
                activeStatus = true;
            }
            $.ajax({
                type: "POST",
                url: "../Academic_HomeWorkMaster/UpdateReviewed",
                data: {
                    isreviewed: activeStatus, homeworkid: '@Model.HomeWorkId', studentid: '@Model.ERP'
                },
                error: function (xhr, status, error) {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
                },
                success: function (result) {

                },
            });
        }
    function UpdateSubmitStatus() {
            var submitStatus = false;
        if ($('#swtichSubmit').is(':checked')) {
                submitStatus = true;
            }
            $.ajax({
                type: "POST",
                url: "../Academic_HomeWorkMaster/UpdateSubmitStatus",
                data: {
                    issubmitted: submitStatus, homeworkid: '@Model.HomeWorkId', studentid: '@Model.ERP'
                },
                error: function (xhr, status, error) {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
                },
                success: function (result) {

                },
            });
        }
</script>
