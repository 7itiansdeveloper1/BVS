@model ISas.Entities.Student_Entities.Student_CertificateModels
@{
    ViewBag.Title = "Student NSO";
}
<section class="content-header">
    <h1>Certificate<small>(UPDATE)</small></h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li>Students</li>
        <li><a href="@Url.Action("LandingPage", "Student_Certificate")">Certificate</a></li>
        <li class="active">UPDATE</li>
    </ol>
</section>
<section class="content">
    <div class="box box-warning">
        <div class="box-header with-border">
            <h5 class="box-title">Add Certificate</h5>
        </div>
        @using (Html.BeginForm("Student_Certificate_CRUD", "Student_Certificate", FormMethod.Post, htmlAttributes: new { id = "form1" }))
        {
            @Html.HiddenFor(r => Model.StudentCertificateId)
            @Html.HiddenFor(r => Model.SessionId)
            <div class="box-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.SessionId)<i class="mandateLbl">*</i></label>
                            <div class="select">

                                @Html.DropDownListFor(m => m.SessionId, Model.SessionList, "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;", disabled = "disabled" })
                                @Html.ValidationMessageFor(r => Model.SessionId, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.AppliedDate)<i class="mandateLbl">*</i></label>
                            <div class="input-group date">
                                <div class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </div>
                                @Html.TextBoxFor(m => m.AppliedDate, htmlAttributes: new { @class = "form-control pull-right date" })
                                @Html.ValidationMessageFor(r => Model.AppliedDate, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.IssueDate)<i class="mandateLbl">*</i></label>
                            <div class="input-group date">
                                <div class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </div>
                                @Html.TextBoxFor(m => m.IssueDate, htmlAttributes: new { @class = "form-control pull-right date" })
                                @Html.ValidationMessageFor(r => Model.IssueDate, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.CertificateID)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.CertificateID, new SelectList(Model.CertificateTypeList, "Value", "Text"), "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.CertificateID, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.ERPNO)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.ERPNO, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(r => Model.ERPNO, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.AdmissionNo)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.AdmissionNo, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(r => Model.AdmissionNo, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.ClassId)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.ClassId, new SelectList(Model.ClassSecList, "Value", "Text"), "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;", onchange = "getSectionListByClass('ClassId', 'SectionId')" })
                                @Html.ValidationMessageFor(r => Model.ClassId, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.SectionId)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.SectionId, new SelectList(Model.SectionList, "Value", "Text"), "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;", onchange = "GetStudentListByClassSection('SessionId', 'ClassId', 'SectionId', 'StudentID')" })
                                @Html.ValidationMessageFor(r => Model.SectionId, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.StudentID)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.DropDownListFor(m => m.StudentID, new SelectList(Model.StudentList, "Value", "Text"), "--Select--", htmlAttributes: new { @class = "form-control select2", style = "width:100%;" })
                                @Html.ValidationMessageFor(r => Model.StudentID, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-3">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.LastExamGiven)</label>
                            <div class="select">
                                @Html.TextBoxFor(m => m.LastExamGiven, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(r => Model.LastExamGiven, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-2">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.LastExamDate)</label>
                            <div class="input-group date">
                                <div class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </div>
                                @Html.TextBoxFor(m => m.LastExamDate, htmlAttributes: new { @class = "form-control pull-right date" })
                                @Html.ValidationMessageFor(r => Model.LastExamDate, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-12">
                        <div class="form-group">
                            <label for="">@Html.LabelFor(r => Model.Remark)<i class="mandateLbl">*</i></label>
                            <div class="select">
                                @Html.TextAreaFor(m => m.Remark, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(r => Model.Remark, null, htmlAttributes: new { style = "color:red;" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="box-footer">
                <button class="btn btn-warning" id="savebutton" type="button" onclick="CommonAjaxPost(this)">UPDATE</button>
                <button class="btn btn-default" type="button" onclick="cancelCertificateConfirm()">CANCEL</button>
            </div>
        }
    </div>
</section>


<script>
    function cancelCertificateConfirm() {
        AsyncConfirmYesNo("Confirmation", "Are you sure to cancel this certificate?", MyYesFunction, MyNoFunction, "");
    }

    function MyYesFunction() {
        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../Student_Certificate/Student_Certificate_CANCEL",
            data: { studCertificateId: '@Model.StudentCertificateId' },
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (result) {
                OpenMessegeAutoHideDiv(result.Msg, result.Color);
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
    function MyNoFunction() {
        //alert('No Calling');
    }
</script>
<script>
    $(function () {
        checkToCallFunction($('#ERPNO').val(), '');
    });

    $("#AdmissionNo").on("change", function () {
        checkToCallFunction('', $('#AdmissionNo').val());
    });
    $("#ERPNO").on("change", function () {
        checkToCallFunction($('#ERPNO').val(), '');
    });
    $("#AdmissionNo").on("keydown", function (event) {
        if (event.which == 13) {
            checkToCallFunction('', $('#AdmissionNo').val());
        }
    });

    $("#ERPNO").on("keydown", function (event) {
        if (event.which == 13) {
            checkToCallFunction($('#ERPNO').val(), '');
        }
    });


    //function studentChange() {
    //    checkToCallFunction($('#StudentId').val(), '');
    //}


    function checkToCallFunction(ErpNo, AdmNo) {
        if (ErpNo != null && ErpNo != '') {
            getSearchStudentDetails(ErpNo, AdmNo);
        }
        else if (AdmNo != null && AdmNo != '') {
            getSearchStudentDetails(ErpNo, AdmNo);
        } else {
            return false;
        }
    }

    function getSearchStudentDetails(ErpNo, AdmNo) {
        var classHtml = '<option value="">--Select--</option>';
        var sectionHtml = '<option value="">--Select--</option>';
        var studentHtml = '<option value="">--Select--</option>';
        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../Common/GetStudentSearchDetails",
            data: { SessionId: $('#SessionId').val(), ErpNo: ErpNo, AdmNo: AdmNo },
            success: function (result) {
                $('#AdmissionNo').val(result.AdmNo);
                $('#ERPNO').val(result.ERPNo);
                $('#FatherName').val(result.FatherName);
                $('#MotherName').val(result.MotherName);
                $('#MobileNo').val(result.MobileNo);
                $('#FeeCategory').val(result.FeeCategory);

                var siblingHtml = "";
                for (var i = 0; i < result.SiblingList.length; i++) {
                    if (siblingHtml == "" || siblingHtml == null) {
                        siblingHtml += '<a href="#" onclick="getSearchStudentDetails(' + result.SiblingList[i].Value + ')" >' + result.SiblingList[i].Text + '</a>';
                    } else {
                        siblingHtml += ", " + '<a href="#" onclick="getSearchStudentDetails(' + result.SiblingList[i].Value + ')" >' + result.SiblingList[i].Text + '</a>';
                    }
                }

                $('#siblingNameHtml').html(siblingHtml);

                for (var i = 0; i < result.ClassList.length; i++) {
                    if (result.ClassList[i].Selected) {
                        classHtml += '<option selected="selected" selected="selected" value=' + result.ClassList[i].Value + '>' + result.ClassList[i].Text + '</option>';
                    } else {
                        classHtml += '<option  value=' + result.ClassList[i].Value + '>' + result.ClassList[i].Text + '</option>';
                    }
                }

                $('#ClassId').html(classHtml);

                for (var i = 0; i < result.SectionList.length; i++) {
                    if (result.SectionList[i].Selected) {
                        sectionHtml += '<option selected="selected" selected="selected" value=' + result.SectionList[i].Value + '>' + result.SectionList[i].Text + '</option>';
                    } else {
                        sectionHtml += '<option  value=' + result.SectionList[i].Value + '>' + result.SectionList[i].Text + '</option>';
                    }
                }

                for (var i = 0; i < result.StudentList.length; i++) {
                    if (result.StudentList[i].Selected) {
                        studentHtml += '<option selected="selected" selected="selected" value=' + result.StudentList[i].Value + '>' + result.StudentList[i].Text + '</option>';
                    } else {
                        studentHtml += '<option  value=' + result.StudentList[i].Value + '>' + result.StudentList[i].Text + '</option>';
                    }
                }

                $('#SectionId').html(sectionHtml);
                $('#StudentID').html(studentHtml);

                //  onStudentChangeFunction();
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
</script>
<script>
        //function DoAjaxPostAndMore(btnClicked) {
        //    var $form = $(btnClicked).parents('form');
        //    $.ajax({
        //        type: "POST",
        //        beforeSend: function () {
        //            spinnerShow();
        //        },
        //        url: $form.attr('action'),
        //        data: $form.serialize(),
        //        error: function (xhr, status, error) {
        //            OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
        //        },
        //        success: function (response) {
        //            if (response.status == 'success') {
        //                OpenMessegeAutoHideDiv(response.Msg, response.Color);
        //                setTimeout(function () { window.location = "../Student_NSO/Student_NSOLandingPage"; }, $('#hddnReloadTime').val());
        //            } else {
        //                OpenMessegeAutoHideDiv($('#ErrorMsgOnModelStateNotValid').val());
        //                AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
        //                AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
        //            }
        //        },
        //        complete: function () {
        //            spinnerHide();
        //        }
        //    });
        //}

        $(document).on('change', "#StudentID", function () {
            $.ajax({
                url: '@Url.Action("GetddlStudentList1", "Student_TC")',
                data: { sessionId: $('#SessionId').val(), classId: $('#ClassId').val(), sectionId: $('#SectionId').val(), erpNo: $('#StudentID').val() },
                type: 'get',
                success: (function (data) {
                    $('#ERPNO').val(data.ERPNo);
                    $('#AdmissionNo').val(data.AdmNo);
                    $('#FatherName').val(data.FatherName);
                }),
                error: function (xhr, status, error) {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
                },
            });
        });
</script>