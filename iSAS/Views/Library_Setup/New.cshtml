@model ISas.Entities.LibraryEntities.Library_SetupModels

<section class="content-header">
    <h1>
        Library Setup
    </h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li>Library</li>
        <li class="active">Library Setup</li>
    </ol>
</section>
<section class="content">
    @using (Html.BeginForm("Library_Setup_CRUD", "Library_Setup", FormMethod.Post, htmlAttributes: new { }))
    {
        @Html.HiddenFor(r => Model.LibId)

    <div class="box box-success">
        <div class="box-header with-border">
            <div class="pull-right">
                <a title="Author Master" href="@Url.Action("New", "Library_AuthorMaster")" class="btn btn-default btn-sm"><i class="fa fa-users"></i></a>
                <a title="Subject Master" href="@Url.Action("New", "Library_SubjectMaster")" class="btn btn-default btn-sm"><i class="fa fa-bars"></i></a>
                <a title="Book Title Master" href="@Url.Action("New", "Library_BookTitleMaster")" class="btn btn-default btn-sm"><i class="fa fa-diamond"></i></a>
                <a title="Supplier Master" href="@Url.Action("New", "Library_SupplierMaster")" class="btn btn-default btn-sm"><i class="fa fa-truck"></i></a>
                <a title="Publisher Master" href="@Url.Action("New", "Library_PublisherMaster")" class="btn btn-default btn-sm"><i class="fa fa-user"></i></a>
                <a title="Book Master" href="@Url.Action("New", "Library_BookMaster")" class="btn btn-default btn-sm"><i class="fa fa-book"></i></a>
                <a title="Generate BarCode" href="@Url.Action("GenerateBarcode_FilterPage", "Library_GenerateBarcode")" class="btn btn-default btn-sm"><i class="fa fa-barcode"></i></a>
            </div>
        </div>
        <div class="box-body">
            <div class="row">
                <div class="col-xs-12 col-sm-6 col-md-3">
                    <div class="form-group">
                        <label for="">@Html.LabelFor(r => Model.LibName)<i class="mandateLbl">*</i></label>
                        <div class="select">
                            @Html.TextBoxFor(m => m.LibName, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(r => Model.LibName, null, htmlAttributes: new { style = "color:red;" })
                        </div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-md-3">
                    <div class="form-group">
                        <label for="">@Html.LabelFor(r => Model.LibPrefix)</label>
                        <div class="select">
                            @Html.TextBoxFor(m => m.LibPrefix, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(r => Model.LibPrefix, null, htmlAttributes: new { style = "color:red;" })
                        </div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-md-3">
                    <div class="form-group">
                        <label for="">@Html.LabelFor(r => Model.StartAccNo)</label>
                        <div class="select">
                            @Html.TextBoxFor(m => m.StartAccNo, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(r => Model.StartAccNo, null, htmlAttributes: new { style = "color:red;" })
                        </div>
                    </div>
                </div>

                <div class="col-xs-12 col-sm-6 col-md-3">
                    <div class="form-group">
                        <label for="">@Html.LabelFor(r => Model.AccLen)</label>
                        <div class="select">
                            @Html.TextBoxFor(m => m.AccLen, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(r => Model.AccLen, null, htmlAttributes: new { style = "color:red;" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-xs-12 col-sm-6 col-md-3">
                    <div class="radio">
                        <label>@Html.RadioButtonFor(r => Model.LibCat, "IND", htmlAttributes: new { }) Individual</label>
                        <label>@Html.RadioButtonFor(r => Model.LibCat, "ACC", htmlAttributes: new { }) Accumulative</label>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-md-3">
                    <div class="checkbox">
                        <label>
                            @Html.CheckBoxFor(r => Model.UsePrefix) Use Prefix in Acc No
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="box-footer">
            <button class="btn btn-success" id="savebutton" type="button" onclick="DoAjaxPostAndMore(this)">SAVE</button>
            <button class="btn btn-default" type="button" onclick="window.location.reload()">RESET</button>
        </div>
    </div>

        <div class="" id="liblistMainDiv">
            @{ Html.RenderAction("LandingPage", "Library_Setup", new { }); }
        </div>
    }
</section>

<script>
    function DoAjaxPostAndMore(btnClicked) {
        var $form = $(btnClicked).parents('form');
        $.ajax({
            type: "POST",
            beforeSend: function () {
                spinnerShow();
            },
            url: $form.attr('action'),
            data: $form.serialize(),
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (response) {
                if (response.status == 'success') {
                    OpenMessegeAutoHideDiv(response.Msg, response.Color);
                    setTimeout(function () { window.location = "../Library_Setup/New"; }, $('#hddnReloadTime').val());
                }
                else {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnModelStateNotValid').val());
                    AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
                    AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
                }
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
</script>
