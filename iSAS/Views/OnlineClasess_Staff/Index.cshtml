@model ISas.Entities.DashboardEntities.OnlineClass_Staff
@{ 
    List<SelectListItem> timeList = new List<SelectListItem>();
    timeList.Add(new SelectListItem {  Text="07:00 AM",Value= "07:00AM" });timeList.Add(new SelectListItem { Text = "07:15 AM", Value = "07:15AM" });timeList.Add(new SelectListItem { Text = "07:30 AM", Value = "07:30AM" });    timeList.Add(new SelectListItem { Text = "07:45 AM", Value = "07:45AM" });
    timeList.Add(new SelectListItem { Text = "08:00 AM", Value = "08:00AM" });timeList.Add(new SelectListItem { Text = "08:15 AM", Value = "08:15AM" });timeList.Add(new SelectListItem { Text = "08:30 AM", Value = "08:30AM" });
    timeList.Add(new SelectListItem { Text = "08:45 AM", Value = "08:45AM" });
    timeList.Add(new SelectListItem { Text = "09:00 AM", Value = "09:00AM" });
    timeList.Add(new SelectListItem { Text = "09:15 AM", Value = "09:15AM" });
    timeList.Add(new SelectListItem { Text = "09:30 AM", Value = "09:30AM" });
    timeList.Add(new SelectListItem { Text = "09:45 AM", Value = "09:45AM" });
    timeList.Add(new SelectListItem { Text = "10:00 AM", Value = "10:00AM" });
    timeList.Add(new SelectListItem { Text = "10:15 AM", Value = "10:15AM" });
    timeList.Add(new SelectListItem { Text = "10:30 AM", Value = "10:30AM" });
    timeList.Add(new SelectListItem { Text = "10:45 AM", Value = "10:45AM" });
    timeList.Add(new SelectListItem { Text = "11:00 AM", Value = "11:00AM" });
    timeList.Add(new SelectListItem { Text = "11:15 AM", Value = "11:15AM" });
    timeList.Add(new SelectListItem { Text = "11:30 AM", Value = "11:30AM" });
    timeList.Add(new SelectListItem { Text = "11:45 AM", Value = "11:45AM" });
    timeList.Add(new SelectListItem { Text = "12:00 PM", Value = "12:00PM" });
    timeList.Add(new SelectListItem { Text = "12:15 PM", Value = "12:15PM" });
    timeList.Add(new SelectListItem { Text = "12:30 PM", Value = "12:30PM" });
    timeList.Add(new SelectListItem { Text = "12:45 PM", Value = "12:45PM" });
    timeList.Add(new SelectListItem { Text = "01:00 PM", Value = "01:00PM" });
    timeList.Add(new SelectListItem { Text = "01:15 PM", Value = "01:15PM" });
    timeList.Add(new SelectListItem { Text = "01:30 PM", Value = "01:30PM" });
    timeList.Add(new SelectListItem { Text = "01:45 PM", Value = "01:45PM" });
    timeList.Add(new SelectListItem { Text = "02:00 PM", Value = "02:00PM" });
    timeList.Add(new SelectListItem { Text = "02:15 PM", Value = "02:15PM" });
    timeList.Add(new SelectListItem { Text = "02:30 PM", Value = "02:30PM" });
    timeList.Add(new SelectListItem { Text = "02:45 PM", Value = "02:45PM" });
    timeList.Add(new SelectListItem { Text = "03:00 PM", Value = "03:00PM" });
    timeList.Add(new SelectListItem { Text = "03:15 PM", Value = "03:15PM" });
    timeList.Add(new SelectListItem { Text = "03:30 PM", Value = "03:30PM" });
    timeList.Add(new SelectListItem { Text = "03:45 PM", Value = "03:45PM" });
    timeList.Add(new SelectListItem { Text = "04:00 PM", Value = "04:00PM" });
    timeList.Add(new SelectListItem { Text = "04:15 PM", Value = "04:15PM" });
    timeList.Add(new SelectListItem { Text = "04:30 PM", Value = "04:30PM" });
    timeList.Add(new SelectListItem { Text = "05:45 PM", Value = "05:45PM" });
    timeList.Add(new SelectListItem { Text = "06:00 PM", Value = "06:00PM" });
    
}
<section class="content-header">
    <h1>
     Create online class
    </h1>
    <ol class="breadcrumb">
        <li>
            <a href="javascript: history.go(-1)" title="Back"><i class="fa fa-arrow-left"></i> </a> |
            <a href="#" onclick="window.location.reload()" title="Refresh"><i class="fa fa-refresh"></i></a> |
            <a href="@Url.Action("Dashboard", "Dashboard")" title="Dashboard"><i class="fa fa-dashboard"></i></a>
        </li>
        <li>Staff</li>
        <li class="active">Online classes</li>
    </ol>
</section>

<section class="content">
    @using (Html.BeginForm("OnlineClasess_Staff_CRUD", "OnlineClasess_Staff", FormMethod.Post, htmlAttributes: new { }))
    {
    <div class="box box-primary">

        @*<div class="box-header with-border">
            <div class="box-title">
                <h5 class="box-title">Create Online Class</h5>
            </div>
        </div>*@
        <div class="box-body">
            <div class="row">
                <div class="col-xs-12 col-sm-6 col-md-2">
                    <label for="">@Html.LabelFor(r => Model.object_onlineclass.onlineClassDate)</label>
                    <div class="input-group date">
                        <div class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </div>
                        @Html.TextBoxFor(m => Model.object_onlineclass.onlineClassDate, htmlAttributes: new { @class = "form-control pull-right date" })
                        @Html.ValidationMessageFor(r => Model.object_onlineclass.onlineClassDate, null, htmlAttributes: new { style = "color:red;" })
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-md-1">
                    <div class="form-group">
                        <br />
                        <div class="select">
                            <h5>
                                <button type="button" class="btn btn-success" onclick="getOnineclassList()">   <i class="fa fa-search btnDefaultColor"></i> </button>
                            </h5>
                        </div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6 col-md-1 pull-right">
                    <div class="form-group">
                        <br />
                        <div class="select">
                            <h5>
                                <button type="button" class="btn btn-file" onclick="PasstoModal('@Model.object_onlineclass.zoomURL');enablbutton();" data-toggle="modal" data-target="#modal-default" title="Zoom URL"><i class="fa fa-gear btnDefaultColor"> </i></button>
                            </h5>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">

                <div class="col-xs-12 col-sm-6 col-md-2">
                    <label for="">@Html.LabelFor(r => Model.object_onlineclass.onlineClassName)</label>
                    @Html.TextBoxFor(m => Model.object_onlineclass.onlineClassName, htmlAttributes: new { @class = "form-control select" })
                    @Html.ValidationMessageFor(r => Model.object_onlineclass.onlineClassName, null, htmlAttributes: new { style = "color:red;" })
                </div>
                <div class="col-xs-12 col-sm-6 col-md-2">
                    <label for="">@Html.LabelFor(r => Model.object_onlineclass.classId)</label>
                    @Html.DropDownListFor(m => Model.object_onlineclass.classId, Model.classList, "----Select Class----", htmlAttributes: new { @class = "form-control select2" })
                    @Html.ValidationMessageFor(r => Model.object_onlineclass.classId, null, htmlAttributes: new { style = "color:red;" })
                </div>
                <div class="col-xs-12 col-sm-6 col-md-3">
                    <label for="">@Html.LabelFor(r => Model.object_onlineclass.subjectId)</label>
                    @Html.DropDownListFor(m => Model.object_onlineclass.subjectId, Model.subjectList, "----Select Subject----", htmlAttributes: new { @class = "form-control select2" })
                    @Html.ValidationMessageFor(r => Model.object_onlineclass.subjectId, null, htmlAttributes: new { style = "color:red;" })
                </div>
                <div class="col-xs-12 col-sm-6 col-md-2">
                    <label for="">@Html.LabelFor(r => Model.object_onlineclass.onlineClassStartTime)</label>
                    @Html.DropDownListFor(m => Model.object_onlineclass.onlineClassStartTime, timeList, "----Select Time----", htmlAttributes: new { @class = "form-control select2" })
                    @Html.ValidationMessageFor(r => Model.object_onlineclass.onlineClassStartTime, null, htmlAttributes: new { style = "color:red;" })
                </div>
                <div class="col-xs-12 col-sm-6 col-md-2">
                    <label for="">@Html.LabelFor(r => Model.object_onlineclass.onlineClassEndTime)</label>
                    @Html.DropDownListFor(m => Model.object_onlineclass.onlineClassEndTime, timeList, "----Select Time----", htmlAttributes: new { @class = "form-control select2" })
                    @Html.ValidationMessageFor(r => Model.object_onlineclass.onlineClassEndTime, null, htmlAttributes: new { style = "color:red;" })
                </div>
            </div>

        </div>
        <div class="box-footer">
            <button class="btn btn-success pull-right" id="savebutton" type="button"  onclick="CreateClass(this)">SAVE</button>
        </div>


    </div>
        <hr>
        <div id="divOnlineclass">
            @{ Html.RenderAction("_dayOnlineClass", "OnlineClasess_Staff", new { onlineclassdate = Model.object_onlineclass.onlineClassDate }); }
        </div>

        <div class="modal fade" id="modal-default">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" id="btnmodelclose"  class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4  class="modal-title">Zoom URL</h4>
                </div>
                <div class="modal-body">
                    @Html.TextBox("zoomurl", "", htmlAttributes: new { @class = "form-control select", onkeypress = "enablbutton()" })
                    <h6 id="error" class="modal-title pull-right" style="color:red"></h6>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnGotoUpdate" disabled="disabled" class="btn btn-primary" onclick="UpdateZoom()">UPDATE</button>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>

    }


</section>
<script>
    function getOnineclassList() {
        $.ajax({
            type: "GET",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../OnlineClasess_Staff/_dayOnlineClass",
            data: {onlineclassdate: $('#object_onlineclass_onlineClassDate').val()},
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (result) {
                $('#divOnlineclass').html(result);
            },
            complete: function () {
                spinnerHide();
            }
        });
    }
    
    function enablbutton() {

        if ($('#zoomurl').val() != "") {
            console.log($('#zoomurl').val());
            $('#btnGotoUpdate').prop("disabled", false);
        }
        else {
            $('#btnGotoUpdate').prop("disabled", true);
        }
    }
    function CreateClass(btnClicked) {
        var $form = $(btnClicked).parents('form');
        $.ajax({
            type: "POST",
            beforeSend: function() {
                spinnerShow();
            },
            url:"../OnlineClasess_Staff/OnlineClasess_Staff_CRUD",
            data: $form.serialize(),
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (response) {
                console.log(response.status);
                if (response.status == 'success') {
                    OpenMessegeAutoHideDiv(response.Msg, response.Color);
                    getOnineclassList();
                }
                else {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnModelStateNotValid').val());
                    AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
                    AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
                }
            },
            complete: function () {
                spinnerHide();
            }

        });
    }

    function UpdateZoom(){
        $.ajax({
            type: "POST",
            beforeSend: function () {
                spinnerShow();
            },
            url: "../OnlineClasess_Staff/ZoomURL_CRUD",
            data: { zoomurl:$('#zoomurl').val()},
            error: function (xhr, status, error) {
                OpenMessegeAutoHideDiv($('#ErrorMsgOnJasonFailed').val(), 'Danger');
            },
            success: function (response) {
                console.log(response.status);
                if (response.status == 'success') {
                    $('#btnmodelclose').click();
                    OpenMessegeAutoHideDiv(response.Msg, response.Color);
                }
                else {
                    OpenMessegeAutoHideDiv($('#ErrorMsgOnModelStateNotValid').val());
                    AddErrorAttributeCSS(response.ErrorList); //Available in CustomCommon.js
                    AddValidAttributeCSS(response.ValidKeyList); //Available in CustomCommon.js
                }
            },
            complete: function () {
                spinnerHide();
            }
        });
    }

    function PasstoModal(zoomurl) {
        //alert(zoomurl);
        $('#zoomurl').val(zoomurl);
    }
</script>